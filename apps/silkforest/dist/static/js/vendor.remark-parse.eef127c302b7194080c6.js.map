{"version":3,"file":"static/js/vendor.remark-parse.eef127c302b7194080c6.js","mappings":"6IAqBe,SAASA,EAAYC,GAGlC,MAAMC,EAAOC,KAEbD,EAAKE,OAKL,SAAgBC,GACd,OAAO,OAAaA,EAAK,IACpBH,EAAKI,KAAK,eACVL,EAIHM,WAAYL,EAAKI,KAAK,wBAA0B,GAChDE,gBAAiBN,EAAKI,KAAK,2BAA6B,IAE5D,CACF,C","sources":["webpack://silkforest-web/../../node_modules/remark-parse/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n"],"names":["remarkParse","options","self","this","parser","doc","data","extensions","mdastExtensions"],"sourceRoot":""}