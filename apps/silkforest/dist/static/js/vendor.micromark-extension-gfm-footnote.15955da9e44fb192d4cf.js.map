{"version":3,"file":"static/js/vendor.micromark-extension-gfm-footnote.15955da9e44fb192d4cf.js","mappings":"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","sources":["webpack://silkforest-web/../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js"],"sourcesContent":["/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if weâ€™ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We canâ€™t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > ðŸ‘‰ **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > ðŸ‘‰ **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}"],"names":["indent","tokenize","effects","ok","nok","self","this","code","tail","events","length","type","sliceSerialize","partial","gfmFootnote","document","name","tokenizeDefinitionStart","continuation","tokenizeDefinitionContinuation","exit","gfmFootnoteDefinitionEnd","text","tokenizeGfmFootnoteCall","add","tokenizePotentialGfmFootnoteCall","resolveTo","resolveToPotentialGfmFootnoteCall","index","defined","parser","gfmFootnotes","labelStart","token","_balanced","id","start","end","now","codePointAt","includes","slice","enter","consume","context","call","Object","assign","marker","column","offset","_bufferIndex","string","chunk","contentType","replacement","splice","data","size","callStart","callData","callEscape","identifier","_container","labelAtMarker","labelInside","labelAfter","labelEscape","push","whitespaceAfter","check","attempt"],"sourceRoot":""}