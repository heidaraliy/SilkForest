{"version":3,"file":"static/js/vendor.micromark-extension-gfm-autolink-literal.6953e6382152f23fc3b3.js","mappings":"+IAKA,MAAMA,EAAY,CAChBC,SA2YF,SAA2BC,EAASC,EAAIC,GACtC,IAAIC,EAAO,EACX,OAYA,SAASC,EAAgBC,GACvB,IAAc,KAATA,GAAwB,MAATA,IAAiBF,EAAO,EAG1C,OAFAA,IACAH,EAAQM,QAAQD,GACTD,EAET,GAAa,KAATC,GAAwB,IAATF,EAEjB,OADAH,EAAQM,QAAQD,GACTE,EAET,OAAOL,EAAIG,EACb,EAYA,SAASE,EAAeF,GAEtB,OAAgB,OAATA,EAAgBH,EAAIG,GAAQJ,EAAGI,EACxC,CACF,EAnbEG,SAAS,GAELC,EAAS,CACbV,SA6bF,SAAwBC,EAASC,EAAIC,GAEnC,IAAIQ,EAEAC,EAEAC,EACJ,OAAOC,EAYP,SAASA,EAAaR,GAIpB,OAAa,KAATA,GAAwB,KAATA,EACVL,EAAQc,MAAMC,EAAOC,EAAaC,EAAlCjB,CAAuDK,GASnD,OAATA,IAAiB,QAA0BA,KAAS,QAAkBA,IAAkB,KAATA,IAAe,QAAmBA,GAC5GW,EAAYX,IAErBO,GAAO,EACPZ,EAAQM,QAAQD,GACTQ,EACT,CAYA,SAASI,EAAoBZ,GAY3B,OAVa,KAATA,EACFK,GAA0B,GAK1BC,EAA8BD,EAC9BA,OAA0BQ,GAE5BlB,EAAQM,QAAQD,GACTQ,CACT,CAWA,SAASG,EAAYX,GAGnB,OAAIM,GAA+BD,IAA4BE,EACtDV,EAAIG,GAENJ,EAAGI,EACZ,CACF,EA/gBEG,SAAS,GAELW,EAAO,CACXpB,SAyhBF,SAAsBC,EAASC,GAC7B,IAAImB,EAAW,EACXC,EAAY,EAChB,OAAOC,EAYP,SAASA,EAAWjB,GAClB,OAAa,KAATA,GACFe,IACApB,EAAQM,QAAQD,GACTiB,GAMI,KAATjB,GAAegB,EAAYD,EACtBG,EAAkBlB,GAMd,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,MAATA,EAC7ML,EAAQc,MAAMC,EAAOd,EAAIsB,EAAzBvB,CAA4CK,GAExC,OAATA,IAAiB,QAA0BA,KAAS,QAAkBA,GACjEJ,EAAGI,IAEZL,EAAQM,QAAQD,GACTiB,EACT,CAYA,SAASC,EAAkBlB,GAMzB,OAJa,KAATA,GACFgB,IAEFrB,EAAQM,QAAQD,GACTiB,CACT,CACF,EAplBEd,SAAS,GAELO,EAAQ,CACZhB,SAkmBF,SAAuBC,EAASC,EAAIC,GAClC,OAAOa,EAYP,SAASA,EAAMV,GAEb,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,MAATA,GACvKL,EAAQM,QAAQD,GACTU,GAMI,KAATV,GACFL,EAAQM,QAAQD,GACTmB,GAMI,KAATnB,GACFL,EAAQM,QAAQD,GACToB,GAIA,KAATpB,GAES,OAATA,IAAiB,QAA0BA,KAAS,QAAkBA,GAC7DJ,EAAGI,GAELH,EAAIG,EACb,CAeA,SAASoB,EAAkBpB,GAGzB,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,IAAe,QAA0BA,KAAS,QAAkBA,GAC/FJ,EAAGI,GAELU,EAAMV,EACf,CAYA,SAASmB,EAA6BnB,GAEpC,OAAO,QAAWA,GAAQqB,EAA8BrB,GAAQH,EAAIG,EACtE,CAYA,SAASqB,EAA8BrB,GAErC,OAAa,KAATA,GACFL,EAAQM,QAAQD,GACTU,IAEL,QAAWV,IACbL,EAAQM,QAAQD,GACTqB,GAIFxB,EAAIG,EACb,CACF,EA3sBEG,SAAS,GAELmB,EAAsB,CAC1B5B,SAytBF,SAAqCC,EAASC,EAAIC,GAChD,OAYA,SAAeG,GAGb,OADAL,EAAQM,QAAQD,GACTuB,CACT,EAYA,SAASA,EAAMvB,GAEb,OAAO,QAAkBA,GAAQH,EAAIG,GAAQJ,EAAGI,EAClD,CACF,EAzvBEG,SAAS,GAELqB,EAAc,CAClBC,KAAM,cACN/B,SAwMF,SAA6BC,EAASC,EAAIC,GACxC,MAAM6B,EAAOC,KACb,OAYA,SAAkB3B,GAChB,GAAa,KAATA,GAAwB,MAATA,IAAiB4B,EAAYC,KAAKH,EAAMA,EAAKI,WAAaC,EAAmBL,EAAKM,QACnG,OAAOnC,EAAIG,GAMb,OAJAL,EAAQsC,MAAM,mBACdtC,EAAQsC,MAAM,sBAGPtC,EAAQc,MAAMhB,EAAWE,EAAQuC,QAAQ9B,EAAQT,EAAQuC,QAAQpB,EAAMqB,GAAWtC,GAAMA,EAAxFF,CAA6FK,EACtG,EAYA,SAASmC,EAASnC,GAGhB,OAFAL,EAAQyC,KAAK,sBACbzC,EAAQyC,KAAK,mBACNxC,EAAGI,EACZ,CACF,EA/OE8B,SAAUF,GAENS,EAAmB,CACvBZ,KAAM,mBACN/B,SAwPF,SAAkCC,EAASC,EAAIC,GAC7C,MAAM6B,EAAOC,KACb,IAAIW,EAAS,GACT/B,GAAO,EACX,OAYA,SAAuBP,GACrB,IAAc,KAATA,GAAwB,MAATA,IAAiBuC,EAAiBV,KAAKH,EAAMA,EAAKI,YAAcC,EAAmBL,EAAKM,QAK1G,OAJArC,EAAQsC,MAAM,mBACdtC,EAAQsC,MAAM,uBACdK,GAAUE,OAAOC,cAAczC,GAC/BL,EAAQM,QAAQD,GACT0C,EAET,OAAO7C,EAAIG,EACb,EAYA,SAAS0C,EAAqB1C,GAE5B,IAAI,QAAWA,IAASsC,EAAOK,OAAS,EAItC,OAFAL,GAAUE,OAAOC,cAAczC,GAC/BL,EAAQM,QAAQD,GACT0C,EAET,GAAa,KAAT1C,EAAa,CACf,MAAM4C,EAAWN,EAAOO,cACxB,GAAiB,SAAbD,GAAoC,UAAbA,EAEzB,OADAjD,EAAQM,QAAQD,GACT8C,CAEX,CACA,OAAOjD,EAAIG,EACb,CAYA,SAAS8C,EAAsB9C,GAC7B,OAAa,KAATA,GACFL,EAAQM,QAAQD,GACZO,EACKwC,GAETxC,GAAO,EACAuC,IAEFjD,EAAIG,EACb,CAYA,SAAS+C,EAAc/C,GAGrB,OAAgB,OAATA,IAAiB,QAAaA,KAAS,QAA0BA,KAAS,QAAkBA,KAAS,QAAmBA,GAAQH,EAAIG,GAAQL,EAAQuC,QAAQ9B,EAAQT,EAAQuC,QAAQpB,EAAMkC,GAAgBnD,EAA9DF,CAAmEK,EACxN,CAYA,SAASgD,EAAchD,GAGrB,OAFAL,EAAQyC,KAAK,uBACbzC,EAAQyC,KAAK,mBACNxC,EAAGI,EACZ,CACF,EAnWE8B,SAAUS,GAENU,EAAgB,CACpBxB,KAAM,gBACN/B,SAwDF,SAA+BC,EAASC,EAAIC,GAC1C,MAAM6B,EAAOC,KAEb,IAAIuB,EAEAC,EACJ,OAYA,SAAenD,GACb,IAAKoD,EAASpD,KAAUqD,EAAcxB,KAAKH,EAAMA,EAAKI,WAAaC,EAAmBL,EAAKM,QACzF,OAAOnC,EAAIG,GAIb,OAFAL,EAAQsC,MAAM,mBACdtC,EAAQsC,MAAM,wBACPqB,EAAMtD,EACf,EAYA,SAASsD,EAAMtD,GACb,OAAIoD,EAASpD,IACXL,EAAQM,QAAQD,GACTsD,GAEI,KAATtD,GACFL,EAAQM,QAAQD,GACTuD,GAEF1D,EAAIG,EACb,CAgBA,SAASuD,EAAYvD,GAEnB,OAAa,KAATA,EACKL,EAAQc,MAAMa,EAAqBkC,EAAkBC,EAArD9D,CAAqEK,GAIjE,KAATA,GAAwB,KAATA,IAAe,QAAkBA,IAClDmD,GAAO,EACPxD,EAAQM,QAAQD,GACTuD,GASFC,EAAiBxD,EAC1B,CAYA,SAASyD,EAAezD,GAGtB,OAFAL,EAAQM,QAAQD,GAChBkD,GAAM,EACCK,CACT,CAYA,SAASC,EAAiBxD,GAGxB,OAAImD,GAAQD,IAAO,QAAWxB,EAAKI,WACjCnC,EAAQyC,KAAK,wBACbzC,EAAQyC,KAAK,mBACNxC,EAAGI,IAELH,EAAIG,EACb,CACF,EAhLE8B,SAAUuB,GAINK,EAAO,CAAC,EAUP,SAASC,IACd,MAAO,CACLD,OAEJ,CAGA,IAAI1D,EAAO,GAGX,KAAOA,EAAO,KACZ0D,EAAK1D,GAAQiD,EACbjD,IACa,KAATA,EAAaA,EAAO,GAAqB,KAATA,IAAaA,EAAO,IAutB1D,SAAS4B,EAAY5B,GACnB,OAAgB,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,MAATA,IAAgB,QAA0BA,EAC/I,CAQA,SAASuC,EAAiBvC,GACxB,QAAQ,QAAWA,EACrB,CAMA,SAASqD,EAAcrD,GAKrB,QAAkB,KAATA,GAAeoD,EAASpD,GACnC,CAMA,SAASoD,EAASpD,GAChB,OAAgB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,IAAe,QAAkBA,EACvF,CAMA,SAAS+B,EAAmBC,GAC1B,IAAI4B,EAAQ5B,EAAOW,OACfkB,GAAS,EACb,KAAOD,KAAS,CACd,MAAME,EAAQ9B,EAAO4B,GAAO,GAC5B,IAAoB,cAAfE,EAAMC,MAAuC,eAAfD,EAAMC,QAA2BD,EAAME,UAAW,CACnFH,GAAS,EACT,KACF,CAIA,GAAIC,EAAMG,8BAA+B,CACvCJ,GAAS,EACT,KACF,CACF,CAMA,OALI7B,EAAOW,OAAS,IAAMkB,IAGxB7B,EAAOA,EAAOW,OAAS,GAAG,GAAGsB,+BAAgC,GAExDJ,CACT,CAlxBAH,EAAK,IAAMT,EACXS,EAAK,IAAMT,EACXS,EAAK,IAAMT,EACXS,EAAK,IAAMT,EACXS,EAAK,IAAM,CAACT,EAAeZ,GAC3BqB,EAAK,KAAO,CAACT,EAAeZ,GAC5BqB,EAAK,IAAM,CAACT,EAAezB,GAC3BkC,EAAK,KAAO,CAACT,EAAezB,E","sources":["webpack://silkforest-web/../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js"],"sourcesContent":["/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}"],"names":["wwwPrefix","tokenize","effects","ok","nok","size","wwwPrefixInside","code","consume","wwwPrefixAfter","partial","domain","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","check","trail","domainAfter","domainAtPunctuation","undefined","path","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","after","wwwAutolink","name","self","this","previousWww","call","previous","previousUnbalanced","events","enter","attempt","wwwAfter","exit","protocolAutolink","buffer","previousProtocol","String","fromCodePoint","protocolPrefixInside","length","protocol","toLowerCase","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","data","gfmAtext","previousEmail","atext","emailDomain","emailDomainAfter","emailDomainDot","text","gfmAutolinkLiteral","index","result","token","type","_balanced","_gfmAutolinkLiteralWalkedInto"],"sourceRoot":""}