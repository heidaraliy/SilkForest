{"version":3,"file":"static/js/vendor.decimal.js-light.2f2f25da909319e3cbeb.js","mappings":"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","sources":["webpack://silkforest-web/../../node_modules/decimal.js-light/decimal.js"],"sourcesContent":["/*! decimal.js-light v2.5.1 https://github.com/MikeMcl/decimal.js-light/LICENCE */\r\n;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js-light v2.5.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js-light\r\n   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Expat Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  var MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    Decimal = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\r\n      // `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -MAX_E\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to MAX_E\r\n\r\n      // The natural logarithm of 10.\r\n      // 115 digits\r\n      LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    exponentOutOfRange = decimalError + 'Exponent out of range: ',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    ONE,\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n    MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\r\n\r\n    // Decimal.prototype object\r\n    P = {};\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue                       abs\r\n   *  comparedTo                          cmp\r\n   *  decimalPlaces                       dp\r\n   *  dividedBy                           div\r\n   *  dividedToIntegerBy                  idiv\r\n   *  equals                              eq\r\n   *  exponent\r\n   *  greaterThan                         gt\r\n   *  greaterThanOrEqualTo                gte\r\n   *  isInteger                           isint\r\n   *  isNegative                          isneg\r\n   *  isPositive                          ispos\r\n   *  isZero\r\n   *  lessThan                            lt\r\n   *  lessThanOrEqualTo                   lte\r\n   *  logarithm                           log\r\n   *  minus                               sub\r\n   *  modulo                              mod\r\n   *  naturalExponential                  exp\r\n   *  naturalLogarithm                    ln\r\n   *  negated                             neg\r\n   *  plus                                add\r\n   *  precision                           sd\r\n   *  squareRoot                          sqrt\r\n   *  times                               mul\r\n   *  toDecimalPlaces                     todp\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toInteger                           toint\r\n   *  toNumber\r\n   *  toPower                             pow\r\n   *  toPrecision\r\n   *  toSignificantDigits                 tosd\r\n   *  toString\r\n   *  valueOf                             val\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this;\r\n\r\n    y = new x.constructor(y);\r\n\r\n    // Signs differ?\r\n    if (x.s !== y.s) return x.s || -y.s;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\r\n\r\n    xdL = x.d.length;\r\n    ydL = y.d.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var x = this,\r\n      w = x.d.length - 1,\r\n      dp = (w - x.e) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = x.d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) dp--;\r\n\r\n    return dp < 0 ? 0 : dp;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, truncated to `precision` significant digits.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n   *\r\n   */\r\n  P.exponent = function () {\r\n    return getBase10Exponent(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    return this.cmp(y) >= 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isint = function () {\r\n    return this.e > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isneg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.ispos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return this.s === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   * If no base is specified, return log[10](x).\r\n   *\r\n   * log[base](x) = ln(x) / ln(base)\r\n   *\r\n   * The maximum error of the result is 1 ulp (unit in the last place).\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var r,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      wpr = pr + 5;\r\n\r\n    // Default base is 10.\r\n    if (base === void 0) {\r\n      base = new Ctor(10);\r\n    } else {\r\n      base = new Ctor(base);\r\n\r\n      // log[-b](x) = NaN\r\n      // log[0](x)  = NaN\r\n      // log[1](x)  = NaN\r\n      if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\r\n    }\r\n\r\n    // log[b](-x) = NaN\r\n    // log[b](0) = -Infinity\r\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n    // log[b](1) = 0\r\n    if (x.eq(ONE)) return new Ctor(0);\r\n\r\n    external = false;\r\n    r = divide(ln(x, wpr), ln(base, wpr), wpr);\r\n    external = true;\r\n\r\n    return round(r, pr);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var x = this;\r\n    y = new x.constructor(y);\r\n    return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // x % 0 = NaN\r\n    if (!y.s) throw Error(decimalError + 'NaN');\r\n\r\n    // Return x if x is 0.\r\n    if (!x.s) return round(new Ctor(x), pr);\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n    q = divide(x, y, 0, 1).times(y);\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return exp(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return ln(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s || 0;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var x = this;\r\n    y = new x.constructor(y);\r\n    return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var e, sd, w,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    e = getBase10Exponent(x) + 1;\r\n    w = x.d.length - 1;\r\n    sd = w * LOG_BASE + 1;\r\n    w = x.d[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) sd--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = x.d[0]; w >= 10; w /= 10) sd++;\r\n    }\r\n\r\n    return z && e > sd ? e : sd;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n   * significant digits.\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var e, n, pr, r, s, t, wpr,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative or zero?\r\n    if (x.s < 1) {\r\n      if (!x.s) return new Ctor(0);\r\n\r\n      // sqrt(-x) = NaN\r\n      throw Error(decimalError + 'NaN');\r\n    }\r\n\r\n    e = getBase10Exponent(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    pr = Ctor.precision;\r\n    s = wpr = pr + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, wpr + 2)).times(0.5);\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\r\n        n = n.slice(wpr - 3, wpr + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (s == wpr && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          round(t, pr + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        } else if (n != '9999') {\r\n          break;\r\n        }\r\n\r\n        wpr += 4;\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return round(r, pr);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n   * `precision` significant digits.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    // Return 0 if either is 0.\r\n    if (!x.s || !y.s) return new Ctor(0);\r\n\r\n    y.s *= x.s;\r\n    e = x.e + y.e;\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = e;\r\n\r\n    return external ? round(y, Ctor.precision) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.todp = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return round(x, dp + getBase10Exponent(x) + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = toString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = round(new Ctor(x), dp + 1, rm);\r\n      str = toString(x, true, dp + 1);\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) return toString(x);\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\r\n    str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isneg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.toInteger = P.toint = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n   * truncated to `precision` significant digits.\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * The maximum error is 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, sign, yIsInt,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      guard = 12,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // pow(x, 0) = 1\r\n    if (!y.s) return new Ctor(ONE);\r\n\r\n    x = new Ctor(x);\r\n\r\n    // pow(0, y > 0) = 0\r\n    // pow(0, y < 0) = Infinity\r\n    if (!x.s) {\r\n      if (y.s < 1) throw Error(decimalError + 'Infinity');\r\n      return x;\r\n    }\r\n\r\n    // pow(1, y) = 1\r\n    if (x.eq(ONE)) return x;\r\n\r\n    pr = Ctor.precision;\r\n\r\n    // pow(x, 1) = x\r\n    if (y.eq(ONE)) return round(x, pr);\r\n\r\n    e = y.e;\r\n    k = y.d.length - 1;\r\n    yIsInt = e >= k;\r\n    sign = x.s;\r\n\r\n    if (!yIsInt) {\r\n\r\n      // pow(x < 0, y non-integer) = NaN\r\n      if (sign < 0) throw Error(decimalError + 'NaN');\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = new Ctor(ONE);\r\n\r\n      // Max k of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      e = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n      external = false;\r\n\r\n      for (;;) {\r\n        if (k % 2) {\r\n          r = r.times(x);\r\n          truncate(r.d, e);\r\n        }\r\n\r\n        k = mathfloor(k / 2);\r\n        if (k === 0) break;\r\n\r\n        x = x.times(x);\r\n        truncate(x.d, e);\r\n      }\r\n\r\n      external = true;\r\n\r\n      return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\r\n    }\r\n\r\n    // Result is negative if x is negative and the last digit of integer y is odd.\r\n    sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n    x.s = 1;\r\n    external = false;\r\n    r = y.times(ln(x, pr + guard));\r\n    external = true;\r\n    r = exp(r);\r\n    r.s = sign;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var e, str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      e = getBase10Exponent(x);\r\n      str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = round(new Ctor(x), sd, rm);\r\n      e = getBase10Exponent(x);\r\n      str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.tosd = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return round(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = P.valueOf = P.val = P.toJSON = function () {\r\n    var x = this,\r\n      e = getBase10Exponent(x),\r\n      Ctor = x.constructor;\r\n\r\n    return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n  };\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  add                 P.minus, P.plus\r\n   *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n   *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n   *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n   *  exp                 P.exp, P.pow\r\n   *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n   *                      P.toString, divide, round, toString, exp, ln\r\n   *  getLn10             P.log, ln\r\n   *  getZeroString       digitsToString, toString\r\n   *  ln                  P.log, P.ln, P.pow, exp\r\n   *  parseDecimal        Decimal\r\n   *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n   *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n   *                      divide, getLn10, exp, ln\r\n   *  subtract            P.minus, P.plus\r\n   *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n   *  truncate            P.pow\r\n   *\r\n   *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n   *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n   */\r\n\r\n\r\n  function add(x, y) {\r\n    var carry, d, e, i, k, len, xd, yd,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // If either is zero...\r\n    if (!x.s || !y.s) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!y.s) y = new Ctor(x);\r\n      return external ? round(y, pr) : y;\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    k = x.e;\r\n    e = y.e;\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = e;\r\n\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % BASE | 0;\r\n        carry = temp / BASE | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * BASE + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, dp) {\r\n      var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either 0?\r\n      if (!x.s) return new Ctor(x);\r\n      if (!y.s) throw Error(decimalError + 'Division by zero');\r\n\r\n      e = x.e - y.e;\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      for (i = 0; yd[i] == (xd[i] || 0); ) ++i;\r\n      if (yd[i] > (xd[i] || 0)) --e;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n      } else if (dp) {\r\n        sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) return new Ctor(0);\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / LOG_BASE + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * BASE + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= BASE/2\r\n        k = BASE / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k);\r\n          xd = multiplyInteger(xd, k);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= BASE / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= BASE) k = BASE - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n\r\n      q.e = e;\r\n\r\n      return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n   * significant digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   */\r\n  function exp(x, sd) {\r\n    var denominator, guard, pow, sum, t, wpr,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n\r\n    // exp(0) = 1\r\n    if (!x.s) return new Ctor(ONE);\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    while (x.abs().gte(0.1)) {\r\n      x = x.times(t);    // x = x / 2^5\r\n      k += 5;\r\n    }\r\n\r\n    // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(ONE);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = round(pow.times(x), wpr);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        while (k--) sum = round(sum.times(sum), wpr);\r\n        Ctor.precision = pr;\r\n        return sd == null ? (external = true, round(sum, pr)) : sum;\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(x) {\r\n    var e = x.e * LOG_BASE,\r\n      w = x.d[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for (; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n\r\n    if (sd > Ctor.LN10.sd()) {\r\n\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(decimalError + 'LN10 precision limit exceeded');\r\n    }\r\n\r\n    return round(new Ctor(Ctor.LN10), sd);\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(n) is non-terminating (n != 1)\r\n   *\r\n   */\r\n  function ln(y, sd) {\r\n    var c, c0, denominator, e, numerator, sum, t, wpr, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // ln(-x) = NaN\r\n    // ln(0) = -Infinity\r\n    if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n    // ln(1) = 0\r\n    if (x.eq(ONE)) return new Ctor(0);\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    if (x.eq(10)) {\r\n      if (sd == null) external = true;\r\n      return getLn10(Ctor, wpr);\r\n    }\r\n\r\n    wpr += guard;\r\n    Ctor.precision = wpr;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n    e = getBase10Exponent(x);\r\n\r\n    if (Math.abs(e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = getBase10Exponent(x);\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(x, pr)) : x;\r\n    }\r\n\r\n    // x is reduced to a value near 1.\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\r\n    x2 = round(x.times(x), wpr);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = round(numerator.times(x2), wpr);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr);\r\n\r\n        Ctor.precision = pr;\r\n        return sd == null ? (external = true, round(sum, pr)) : sum;\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48;) ++i;\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      e = e - i - 1;\r\n      x.e = mathfloor(e / LOG_BASE);\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\r\n    } else {\r\n\r\n      // Zero.\r\n      x.s = 0;\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n   */\r\n   function round(x, sd, rm) {\r\n    var i, j, k, n, rd, doRound, w, xdi,\r\n      xd = x.d;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd which contains the rounding digit, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // n: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\r\n    i = sd - n;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) return x;\r\n      w = k = xd[xdi];\r\n\r\n      // Get the number of digits of w.\r\n      for (n = 1; k >= 10; k /= 10) n++;\r\n\r\n      // Get the index of rd within w.\r\n      i %= LOG_BASE;\r\n\r\n      // Get the index of rd within w, adjusted for leading zeros.\r\n      // The number of leading zeros of w is given by LOG_BASE - n.\r\n      j = i - LOG_BASE + n;\r\n    }\r\n\r\n    if (rm !== void 0) {\r\n      k = mathpow(10, n - j - 1);\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / k % 10 | 0;\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\r\n\r\n      // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\r\n      // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\r\n      // 714.\r\n\r\n      doRound = rm < 4\r\n        ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n    }\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      if (doRound) {\r\n        k = getBase10Exponent(x);\r\n        xd.length = 1;\r\n\r\n        // Convert sd to decimal places.\r\n        sd = sd - k - 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = mathfloor(-sd / LOG_BASE) || 0;\r\n      } else {\r\n        xd.length = 1;\r\n\r\n        // Zero.\r\n        xd[0] = x.e = x.s = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (doRound) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n          if ((xd[0] += k) == BASE) {\r\n            xd[0] = 1;\r\n            ++x.e;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\r\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) {\r\n      throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function subtract(x, y) {\r\n    var d, e, i, j, k, len, xd, xe, xLTy, yd,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision;\r\n\r\n    // Return y negated if x is zero.\r\n    // Return x if y is zero and x is non-zero.\r\n    if (!x.s || !y.s) {\r\n      if (y.s) y.s = -y.s;\r\n      else y = new Ctor(x);\r\n      return external ? round(y, pr) : y;\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n\r\n    // x and y are non-zero numbers with the same sign.\r\n\r\n    e = y.e;\r\n    xe = x.e;\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of zeros\r\n      // needing to be prepended, but this can be avoided while still ensuring correct rounding by\r\n      // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to xd if shorter.\r\n    // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(0);\r\n\r\n    y.d = xd;\r\n    y.e = e;\r\n\r\n    //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n\r\n  function toString(x, isExp, sd) {\r\n    var k,\r\n      e = getBase10Exponent(x),\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (e < 0 ? 'e' : 'e+') + e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  clone\r\n   *  config/set\r\n   */\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * value {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(value) {\r\n      var x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(value);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (value instanceof Decimal) {\r\n        x.s = value.s;\r\n        x.e = value.e;\r\n        x.d = (value = value.d) ? value.slice() : value;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'number') {\r\n\r\n        // Reject Infinity/NaN.\r\n        if (value * 0 !== 0) {\r\n          throw Error(invalidArgument + value);\r\n        }\r\n\r\n        if (value > 0) {\r\n          x.s = 1;\r\n        } else if (value < 0) {\r\n          value = -value;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 0;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (value === ~~value && value < 1e7) {\r\n          x.e = 0;\r\n          x.d = [value];\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, value.toString());\r\n      } else if (typeof value !== 'string') {\r\n        throw Error(invalidArgument + value);\r\n      }\r\n\r\n      // Minus sign?\r\n      if (value.charCodeAt(0) === 45) {\r\n        value = value.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      if (isDecimal.test(value)) parseDecimal(x, value);\r\n      else throw Error(invalidArgument + value);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n\r\n    Decimal.clone = clone;\r\n    Decimal.config = Decimal.set = config;\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') {\r\n      throw Error(decimalError + 'Object expected');\r\n    }\r\n    var i, p, v,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -1 / 0, 0,\r\n        'toExpPos', 0, 1 / 0\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if ((v = obj[p = ps[i]]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if ((v = obj[p = 'LN10']) !== void 0) {\r\n        if (v == Math.LN10) this[p] = new this(v);\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(Decimal);\r\n\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Internal constant.\r\n  ONE = new Decimal(1);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Decimal;\r\n\r\n    // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self\r\n        ? self : Function('return this')();\r\n    }\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n"],"names":["ONE","MAX_DIGITS","Decimal","precision","rounding","toExpNeg","toExpPos","LN10","external","decimalError","invalidArgument","exponentOutOfRange","mathfloor","Math","floor","mathpow","pow","isDecimal","BASE","MAX_SAFE_INTEGER","MAX_E","P","add","x","y","carry","d","e","i","k","len","xd","yd","Ctor","constructor","pr","s","round","slice","length","ceil","reverse","push","unshift","pop","checkInt32","min","max","Error","digitsToString","ws","indexOfLastWord","str","w","getZeroString","absoluteValue","abs","this","comparedTo","cmp","j","xdL","ydL","decimalPlaces","dp","dividedBy","div","divide","dividedToIntegerBy","idiv","equals","eq","exponent","getBase10Exponent","greaterThan","gt","greaterThanOrEqualTo","gte","isInteger","isint","isNegative","isneg","isPositive","ispos","isZero","lessThan","lt","lessThanOrEqualTo","lte","logarithm","log","base","r","wpr","ln","minus","sub","subtract","modulo","mod","q","times","naturalExponential","exp","naturalLogarithm","negated","neg","plus","sd","z","squareRoot","sqrt","n","t","toExponential","indexOf","toString","mul","rL","shift","toDecimalPlaces","todp","rm","toFixed","toInteger","toint","toNumber","toPower","sign","yIsInt","yn","truncate","toPrecision","toSignificantDigits","tosd","valueOf","val","toJSON","multiplyInteger","temp","compare","a","b","aL","bL","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","denominator","sum","getLn10","zs","c","c0","numerator","x2","charAt","parseDecimal","replace","search","substring","charCodeAt","rd","doRound","xdi","xe","xLTy","isExp","arr","config","obj","p","v","ps","clone","value","test","prototype","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","set","hasOwnProperty"],"sourceRoot":""}