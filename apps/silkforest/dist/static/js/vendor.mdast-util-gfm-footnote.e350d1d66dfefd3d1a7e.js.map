{"version":3,"file":"static/js/vendor.mdast-util-gfm-footnote.e350d1d66dfefd3d1a7e.js","mappings":"iKAuBO,SAASA,IACd,MAAO,CACLC,MAAO,CACLC,sBAAuBC,EACvBC,iCAAkCC,EAClCC,gBAAiBC,EACjBC,sBAAuBC,GAEzBC,KAAM,CACJR,sBAAuBS,EACvBP,iCAAkCQ,EAClCN,gBAAiBO,EACjBL,sBAAuBM,GAG7B,CASO,SAASC,IACd,MAAO,CAELC,OAAQ,CAAC,CAACC,UAAW,IAAKC,YAAa,CAAC,WAAY,QAAS,eAC7DC,SAAU,CAACC,qBAAoBC,qBAEnC,CAMA,SAASlB,EAAwBmB,GAC/BC,KAAKtB,MACH,CAACuB,KAAM,qBAAsBC,WAAY,GAAIC,MAAO,GAAIC,SAAU,IAClEL,EAEJ,CAMA,SAASjB,IACPkB,KAAKK,QACP,CAMA,SAAShB,EAAkCU,GACzC,MAAMI,EAAQH,KAAKM,SACbC,EAAOP,KAAKQ,MAAMR,KAAKQ,MAAMC,OAAS,IAC5C,QAAqB,uBAAdF,EAAKN,MACZM,EAAKJ,MAAQA,EACbI,EAAKL,YAAa,OAChBF,KAAKU,eAAeX,IACpBY,aACJ,CAMA,SAASvB,EAAuBW,GAC9BC,KAAKb,KAAKY,EACZ,CAMA,SAASf,EAAkBe,GACzBC,KAAKtB,MAAM,CAACuB,KAAM,oBAAqBC,WAAY,GAAIC,MAAO,IAAKJ,EACrE,CAMA,SAASb,IACPc,KAAKK,QACP,CAMA,SAASd,EAAuBQ,GAC9B,MAAMI,EAAQH,KAAKM,SACbC,EAAOP,KAAKQ,MAAMR,KAAKQ,MAAMC,OAAS,IAC5C,QAAqB,sBAAdF,EAAKN,MACZM,EAAKJ,MAAQA,EACbI,EAAKL,YAAa,OAChBF,KAAKU,eAAeX,IACpBY,aACJ,CAMA,SAASrB,EAAiBS,GACxBC,KAAKb,KAAKY,EACZ,CAMA,SAASD,EAAkBS,EAAMK,EAAGC,EAAOC,GACzC,MAAMC,EAAUF,EAAMG,cAAcF,GACpC,IAAIG,EAAQF,EAAQG,KAAK,MACzB,MAAM/B,EAAO0B,EAAMnC,MAAM,qBACnByC,EAAUN,EAAMnC,MAAM,aAW5B,OAVAuC,GAASF,EAAQG,KACfL,EAAMO,KAAKP,EAAMQ,cAAcd,GAAO,IACjCQ,EAAQO,UACXC,OAAQN,EACRO,MAAO,OAGXL,IACAhC,IACA8B,GAASF,EAAQG,KAAK,KACfD,CACT,CAWA,SAASpB,EAAmBU,EAAMK,EAAGC,EAAOC,GAC1C,MAAMC,EAAUF,EAAMG,cAAcF,GACpC,IAAIG,EAAQF,EAAQG,KAAK,MACzB,MAAM/B,EAAO0B,EAAMnC,MAAM,sBACnByC,EAAUN,EAAMnC,MAAM,SAkB5B,OAjBAuC,GAASF,EAAQG,KACfL,EAAMO,KAAKP,EAAMQ,cAAcd,GAAO,IACjCQ,EAAQO,UACXC,OAAQN,EACRO,MAAO,OAGXL,IACAF,GAASF,EAAQG,KACf,MAAQX,EAAKH,UAAYG,EAAKH,SAASK,OAAS,EAAI,IAAM,KAE5DM,EAAQU,MAAM,GACdR,GAASF,EAAQG,KACfL,EAAMa,YAAYb,EAAMc,cAAcpB,EAAMQ,EAAQO,WAAYM,IAElEzC,IAEO8B,CACT,CAGA,SAASW,EAAIC,EAAMC,EAAOC,GACxB,OAAc,IAAVD,EACKD,GAGDE,EAAQ,GAAK,QAAUF,CACjC,CAvLA/B,EAAkBkC,KA+IlB,WACE,MAAO,GACT,C","sources":["webpack://silkforest-web/../../node_modules/mdast-util-gfm-footnote/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n"],"names":["gfmFootnoteFromMarkdown","enter","gfmFootnoteDefinition","enterFootnoteDefinition","gfmFootnoteDefinitionLabelString","enterFootnoteDefinitionLabelString","gfmFootnoteCall","enterFootnoteCall","gfmFootnoteCallString","enterFootnoteCallString","exit","exitFootnoteDefinition","exitFootnoteDefinitionLabelString","exitFootnoteCall","exitFootnoteCallString","gfmFootnoteToMarkdown","unsafe","character","inConstruct","handlers","footnoteDefinition","footnoteReference","token","this","type","identifier","label","children","buffer","resume","node","stack","length","sliceSerialize","toLowerCase","_","state","info","tracker","createTracker","value","move","subexit","safe","associationId","current","before","after","shift","indentLines","containerFlow","map","line","index","blank","peek"],"sourceRoot":""}