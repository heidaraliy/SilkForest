{"version":3,"file":"static/js/vendor.mdast-util-to-markdown.90de115a3e2f013d835f.js","mappings":"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","sources":["webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/encode-info.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://silkforest-web/../../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js"],"sourcesContent":["/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n"],"names":["map","line","_","blank","listInScope","stack","list","none","length","index","includes","hardBreak","_1","state","info","unsafe","character","pattern","inConstruct","notInConstruct","test","before","checkQuote","marker","options","quote","Error","encodeCharacterReference","code","toString","toUpperCase","encodeInfo","outside","inside","outsideKind","insideKind","undefined","emphasis","node","checkEmphasis","exit","enter","tracker","createTracker","move","between","containerPhrasing","after","current","betweenHead","charCodeAt","open","slice","betweenTail","close","attentionEncodeSurroundingInfo","peek","html","value","suffix","subexit","safe","alt","url","title","imageReference","type","referenceType","reference","associationId","inlineCode","sequence","RegExp","expression","compilePattern","match","atBreak","exec","position","formatLinkAsAutolink","raw","Boolean","resourceLink","children","linkReference","text","checkBullet","bullet","checkRule","rule","strong","checkStrong","handle","blockquote","shift","indentLines","containerFlow","break","fence","checkFence","fences","lang","formatCodeAsIndented","repeat","Math","max","encode","meta","definition","heading","rank","min","depth","literalWithBreak","setext","formatHeadingAsSetext","lastIndexOf","closeAtx","image","link","parent","bulletCurrent","ordered","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","item","listItem","listItemIndent","style","checkListItemIndent","start","incrementListMarker","indexOf","size","spread","ceil","paragraph","root","some","d","call","thematicBreak","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition"],"sourceRoot":""}