{"version":3,"file":"static/js/vendor.micromark-factory-whitespace.008a1ed0a9b963fc67b4.js","mappings":"yJAwBO,SAASA,EAAkBC,EAASC,GAEzC,IAAIC,EACJ,OAGA,SAASC,EAAMC,GACb,IAAI,QAAmBA,GAKrB,OAJAJ,EAAQK,MAAM,cACdL,EAAQM,QAAQF,GAChBJ,EAAQO,KAAK,cACbL,GAAO,EACAC,EAET,IAAI,QAAcC,GAChB,OAAO,OAAaJ,EAASG,EAAOD,EAAO,aAAe,aAAnD,CAAiEE,GAE1E,OAAOH,EAAGG,EACZ,CACF,C","sources":["webpack://silkforest-web/../../node_modules/micromark-factory-whitespace/index.js"],"sourcesContent":["/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}"],"names":["factoryWhitespace","effects","ok","seen","start","code","enter","consume","exit"],"sourceRoot":""}