{"version":3,"file":"static/js/vendor.micromark-core-commonmark.10174a007d612b01ab9a.js","mappings":"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","sources":["webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/attention.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/autolink.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/code-text.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/content.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/definition.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/html-text.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/label-end.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/list.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://silkforest-web/../../node_modules/micromark-core-commonmark/lib/thematic-break.js"],"sourcesContent":["/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[text][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}"],"names":["attention","name","resolveAll","events","context","open","group","text","openingSequence","closingSequence","use","nextEvents","offset","index","length","type","_close","_open","sliceSerialize","charCodeAt","end","start","movePoint","parser","constructs","insideSpan","null","slice","tokenize","effects","ok","attentionMarkers","this","previous","before","marker","code","enter","inside","consume","token","exit","after","includes","close","Boolean","point","column","_bufferIndex","autolink","nok","size","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","next","blankLine","partial","blockQuote","continuation","self","contBefore","disable","undefined","attempt","state","containerState","_container","characterEscape","characterReference","max","test","numeric","value","nonLazyContinuation","lineStart","lazy","now","line","codeFenced","concrete","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","tail","sequenceOpen","beforeSequenceOpen","infoBefore","interrupt","check","atNonLazyBreak","contentType","info","metaBefore","meta","contentBefore","contentStart","beforeContentChunk","contentChunk","codeIndented","afterPrefix","atBreak","furtherStart","codeText","resolve","tailExitIndex","headEnterIndex","splice","between","data","content","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","flow","definition","identifier","call","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","push","beforeMarker","f","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","headingAtx","sequenceFurther","htmlFlow","resolveTo","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","String","fromCharCode","tagName","commentOpenInside","cdataOpenInside","slash","toLowerCase","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","htmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","newEvents","media","_inactive","_balanced","label","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","labelStartLink","lineEnding","list","_closeFlow","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","kind","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","setextUnderline","heading","paragraph","thematicBreak","sequence"],"sourceRoot":""}