{"version":3,"file":"static/js/vendor.hast-util-to-jsx-runtime.606b7278200ab886f30a.js","mappings":"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","sources":["webpack://silkforest-web/../../node_modules/hast-util-to-jsx-runtime/lib/index.js"],"sourcesContent":["/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they donâ€™t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesnâ€™t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n"],"names":["own","hasOwnProperty","emptyMap","Map","cap","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","options","undefined","Fragment","TypeError","filePath","create","development","jsxDEV","node","type","props","key","isStaticChildren","Array","isArray","children","point","columnNumber","column","fileName","lineNumber","line","developmentCreate","jsx","jsxs","_","fn","productionCreate","state","ancestors","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","space","stylePropertyNameCase","tableCellAlignToStyle","result","one","parentSchema","tagName","toLowerCase","push","findComponentFromName","alignValue","prop","properties","call","createProperty","value","has","style","createElementProps","createChildren","filter","child","addNode","addChildren","pop","element","data","estree","expression","body","evaluateExpression","crashEstree","position","mdxExpression","name","attribute","attributes","objectExpression","property","Object","assign","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","text","length","index","countsByName","count","get","set","info","Number","isNaN","commaSeparated","styleObject","replacer","error","cause","message","ruleId","source","file","url","slice","replace","toCamel","parseStyle","String","domCasing","cssCasing","from","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","includes","identifiers","split","object","computed","Boolean","optional","test","place","to","toDash","$1","toUpperCase","$0"],"sourceRoot":""}