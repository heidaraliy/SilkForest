{"version":3,"file":"static/js/vendor.mdast-util-gfm-autolink-literal.cb1f035dd0cf08d19670.js","mappings":"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","sources":["webpack://silkforest-web/../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js"],"sourcesContent":["/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If itâ€™s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n"],"names":["inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","transformGfmAutolinkLiterals","enter","literalAutolink","enterLiteralAutolink","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","exit","exitLiteralAutolink","exitLiteralAutolinkEmail","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","gfmAutolinkLiteralToMarkdown","unsafe","character","before","after","token","this","type","title","url","children","config","autolinkProtocol","call","data","node","stack","length","sliceSerialize","autolinkEmail","tree","findUrl","findEmail","ignore","_","protocol","domain","path","match","prefix","previous","test","parts","split","isCorrectDomain","trailExec","exec","undefined","slice","index","trail","closingParenIndex","indexOf","openingParens","closingParens","splitUrl","result","value","atext","label","email","code","input","charCodeAt"],"sourceRoot":""}