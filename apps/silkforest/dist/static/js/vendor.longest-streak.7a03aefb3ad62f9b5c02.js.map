{"version":3,"file":"static/js/vendor.longest-streak.7a03aefb3ad62f9b5c02.js","mappings":"gHAUO,SAASA,EAAcC,EAAOC,GACnC,MAAMC,EAASC,OAAOH,GACtB,IAAII,EAAQF,EAAOG,QAAQJ,GACvBK,EAAWF,EACXG,EAAQ,EACRC,EAAM,EAEV,GAAyB,iBAAdP,EACT,MAAM,IAAIQ,UAAU,sBAGtB,MAAkB,IAAXL,GACDA,IAAUE,IACNC,EAAQC,IACZA,EAAMD,GAGRA,EAAQ,EAGVD,EAAWF,EAAQH,EAAUS,OAC7BN,EAAQF,EAAOG,QAAQJ,EAAWK,GAGpC,OAAOE,CACT,C","sources":["webpack://silkforest-web/../../node_modules/longest-streak/index.js"],"sourcesContent":["/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n"],"names":["longestStreak","value","substring","source","String","index","indexOf","expected","count","max","TypeError","length"],"sourceRoot":""}