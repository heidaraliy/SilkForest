{"version":3,"file":"static/js/vendor.mdast-util-from-markdown.817d589ea8a3ffac880d.js","mappings":"8NAgDA,MAAMA,EAAM,CAAC,EAAEC,eAyBR,SAASC,EAAaC,EAAOC,EAAUC,GAK5C,MAJwB,iBAAbD,IACTC,EAAUD,EACVA,OAAWE,GAUf,SAAkBD,GAEhB,MAAME,EAAS,CACbC,WAAY,GACZC,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,UACjEC,MAAO,CACLC,SAAUC,EAAOC,IACjBC,iBAAkBC,EAClBC,cAAeD,EACfE,WAAYL,EAAOM,IACnBC,WAAYP,EAAOO,IACnBC,gBAAiBL,EACjBM,mBAAoBN,EACpBO,WAAYV,EAAOW,IACnBC,oBAAqBC,EACrBC,oBAAqBD,EACrBE,aAAcf,EAAOW,GAAUE,GAC/BG,SAAUhB,EAAOgB,GAAUH,GAC3BI,aAAcd,EACde,KAAMf,EACNgB,cAAehB,EACfiB,WAAYpB,EAAOoB,IACnBC,4BAA6BR,EAC7BS,sBAAuBT,EACvBU,sBAAuBV,EACvBW,SAAUxB,EAAOwB,IACjBC,gBAAiBzB,EAAO0B,IACxBC,kBAAmB3B,EAAO0B,IAC1BE,SAAU5B,EAAO6B,GAAMhB,GACvBiB,aAAc3B,EACd4B,SAAU/B,EAAO6B,GAAMhB,GACvBmB,aAAc7B,EACd8B,MAAOjC,EAAOiC,IACdC,MAAOrB,EACPZ,KAAMD,EAAOC,IACbkC,SAAUnC,EAAOmC,IACjBC,cAAeC,EACfC,YAAatC,EAAOuC,GAAMC,GAC1BC,cAAezC,EAAOuC,IACtBG,UAAW1C,EAAO0C,IAClBC,UAAWC,EACXC,gBAAiBhC,EACjBiC,0BAA2BjC,EAC3BkC,oBAAqBlC,EACrBmC,cAAehD,EAAOM,IACtB2C,OAAQjD,EAAOiD,IACfC,cAAelD,EAAOkD,KAExBC,KAAM,CACJ9C,WAAY+C,IACZC,mBAAoBC,EACpBvD,SAAUqD,IACVhD,cAAemD,GACfrD,iBAAkBsD,GAClBjD,WAAY6C,IACZK,qBAAsBC,EACtBC,oCAAqCC,EACrCC,gCAAiCD,EACjCE,wBAAyBC,EACzBtD,mBAAoBuD,EACpBtD,WAAY0C,EAAOa,GACnBC,gBAAiBC,EACjBvD,oBAAqBwD,EACrBtD,oBAAqBuD,EACrBlD,cAAeuC,EACf3C,aAAcqC,EAAOkB,GACrBtD,SAAUoC,EAAOmB,GACjBtD,aAAcyC,EACdxC,KAAMwC,EACNtC,WAAYgC,IACZ/B,4BAA6BmD,EAC7BlD,sBAAuBmD,EACvBlD,sBAAuBmD,EACvBlD,SAAU4B,IACV3B,gBAAiB2B,EAAOuB,GACxBhD,kBAAmByB,EAAOuB,GAC1B/C,SAAUwB,EAAOwB,GACjB9C,aAAc4B,EACd3B,SAAUqB,EAAOyB,GACjB7C,aAAc0B,EACdzB,MAAOmB,EAAO0B,GACd5C,MAAO6C,EACPC,UAAWC,EACXC,WAAYC,EACZlF,KAAMmD,EAAOgC,GACbjD,SAAUiB,IACVd,YAAac,IACbX,cAAeW,IACfV,UAAWU,IACXP,gBAAiBwC,EACjBvC,0BAA2BwC,EAC3BvC,oBAAqBwC,EACrBC,SAAUC,EACVzC,cAAeI,EAAOsC,GACtBC,0BAA2BC,EAC3BC,kBAAmBC,EACnB7C,OAAQG,IACRF,cAAeE,MAGnB2C,EAAUpG,GAASF,GAAW,CAAC,GAAGuG,iBAAmB,IAGrD,MAAM9E,EAAO,CAAC,EACd,OAAO+E,EAUP,SAASA,EAAQC,GAEf,IAAIC,EAAO,CACTC,KAAM,OACNC,SAAU,IAGZ,MAAMC,EAAU,CACdC,MAAO,CAACJ,GACRK,WAAY,GACZ7G,SACAG,QACAqD,OACAtC,SACA4F,SACAvF,QAGIwF,EAAY,GAClB,IAAIC,GAAS,EACb,OAASA,EAAQT,EAAOU,QAGtB,GAA8B,gBAA1BV,EAAOS,GAAO,GAAGP,MAAoD,kBAA1BF,EAAOS,GAAO,GAAGP,KAC9D,GAAyB,UAArBF,EAAOS,GAAO,GAChBD,EAAUG,KAAKF,OACV,CAELA,EAAQG,EAAYZ,EADPQ,EAAUK,MACWJ,EACpC,CAIJ,IADAA,GAAS,IACAA,EAAQT,EAAOU,QAAQ,CAC9B,MAAMI,EAAUrH,EAAOuG,EAAOS,GAAO,IACjCvH,EAAI6H,KAAKD,EAASd,EAAOS,GAAO,GAAGP,OACrCY,EAAQd,EAAOS,GAAO,GAAGP,MAAMa,KAAKC,OAAOC,OAAO,CAChDC,eAAgBlB,EAAOS,GAAO,GAAGS,gBAChCd,GAAUJ,EAAOS,GAAO,GAE/B,CAGA,GAAIL,EAAQE,WAAWI,OAAS,EAAG,CACjC,MAAMS,EAAOf,EAAQE,WAAWF,EAAQE,WAAWI,OAAS,IAC5CS,EAAK,IAAMC,GACnBL,KAAKX,OAAS5G,EAAW2H,EAAK,GACxC,CAkBA,IAfAlB,EAAKoB,SAAW,CACdC,MAAOC,EAAMvB,EAAOU,OAAS,EAAIV,EAAO,GAAG,GAAGsB,MAAQ,CACpDE,KAAM,EACNC,OAAQ,EACRC,OAAQ,IAEVC,IAAKJ,EAAMvB,EAAOU,OAAS,EAAIV,EAAOA,EAAOU,OAAS,GAAG,GAAGiB,IAAM,CAChEH,KAAM,EACNC,OAAQ,EACRC,OAAQ,KAKZjB,GAAS,IACAA,EAAQhH,EAAOC,WAAWgH,QACjCT,EAAOxG,EAAOC,WAAW+G,GAAOR,IAASA,EAE3C,OAAOA,CACT,CAQA,SAASW,EAAYZ,EAAQsB,EAAOZ,GAClC,IAIIzE,EAEA2F,EAEAC,EAEAC,EAVArB,EAAQa,EAAQ,EAChBS,GAAoB,EACpBC,GAAa,EASjB,OAASvB,GAASC,GAAQ,CACxB,MAAMuB,EAAQjC,EAAOS,GACrB,OAAQwB,EAAM,GAAG/B,MACf,IAAK,gBACL,IAAK,cACL,IAAK,aAEgB,UAAb+B,EAAM,GACRF,IAEAA,IAEFD,OAAWtI,EACX,MAEJ,IAAK,kBAEgB,UAAbyI,EAAM,MACJhG,GAAa6F,GAAaC,GAAqBF,IACjDA,EAAsBpB,GAExBqB,OAAWtI,GAEb,MAEJ,IAAK,aACL,IAAK,gBACL,IAAK,iBACL,IAAK,iBACL,IAAK,2BAID,MAEJ,QAEIsI,OAAWtI,EAGjB,IAAKuI,GAAiC,UAAbE,EAAM,IAAoC,mBAAlBA,EAAM,GAAG/B,OAAmD,IAAtB6B,GAAwC,SAAbE,EAAM,KAAoC,kBAAlBA,EAAM,GAAG/B,MAA8C,gBAAlB+B,EAAM,GAAG/B,MAAyB,CAC/M,GAAIjE,EAAU,CACZ,IAAIiG,EAAYzB,EAEhB,IADAmB,OAAYpI,EACL0I,KAAa,CAClB,MAAMC,EAAYnC,EAAOkC,GACzB,GAA0B,eAAtBC,EAAU,GAAGjC,MAA+C,oBAAtBiC,EAAU,GAAGjC,KAA4B,CACjF,GAAqB,SAAjBiC,EAAU,GAAe,SACzBP,IACF5B,EAAO4B,GAAW,GAAG1B,KAAO,kBAC5B8B,GAAa,GAEfG,EAAU,GAAGjC,KAAO,aACpB0B,EAAYM,CACd,MAAO,GAA0B,eAAtBC,EAAU,GAAGjC,MAA+C,qBAAtBiC,EAAU,GAAGjC,MAAqD,+BAAtBiC,EAAU,GAAGjC,MAA+D,qBAAtBiC,EAAU,GAAGjC,MAAqD,mBAAtBiC,EAAU,GAAGjC,KAG1M,KAEJ,CACI2B,KAAyBD,GAAaC,EAAsBD,KAC9D3F,EAASmG,SAAU,GAIrBnG,EAAS0F,IAAMX,OAAOC,OAAO,CAAC,EAAGW,EAAY5B,EAAO4B,GAAW,GAAGN,MAAQW,EAAM,GAAGN,KACnF3B,EAAOqC,OAAOT,GAAanB,EAAO,EAAG,CAAC,OAAQxE,EAAUgG,EAAM,KAC9DxB,IACAC,GACF,CAGA,GAAsB,mBAAlBuB,EAAM,GAAG/B,KAA2B,CAEtC,MAAMoC,EAAO,CACXpC,KAAM,WACNkC,SAAS,EACTd,MAAON,OAAOC,OAAO,CAAC,EAAGgB,EAAM,GAAGX,OAElCK,SAAKnI,GAEPyC,EAAWqG,EACXtC,EAAOqC,OAAO5B,EAAO,EAAG,CAAC,QAAS6B,EAAML,EAAM,KAC9CxB,IACAC,IACAmB,OAAsBrI,EACtBsI,GAAW,CACb,CACF,CACF,CAEA,OADA9B,EAAOsB,GAAO,GAAGc,QAAUJ,EACpBtB,CACT,CAYA,SAAS5G,EAAOyI,EAAQC,GACtB,OAAOC,EAOP,SAASA,EAAKC,GACZ9I,EAAMmH,KAAK4B,KAAMJ,EAAOG,GAAQA,GAC5BF,GAAKA,EAAIzB,KAAK4B,KAAMD,EAC1B,CACF,CAKA,SAAS/H,IACPgI,KAAKtC,MAAMM,KAAK,CACdT,KAAM,WACNC,SAAU,IAEd,CAKA,SAASvG,EAAMgJ,EAAMF,EAAOG,GACXF,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GAEtBP,SACfQ,KAAKiC,GACdD,KAAKtC,MAAMM,KAAKiC,GAChBD,KAAKrC,WAAWK,KAAK,CAAC+B,EAAOG,QAAgBrJ,IAC7CoJ,EAAKvB,SAAW,CACdC,MAAOC,EAAMmB,EAAMpB,OAEnBK,SAAKnI,EAET,CAUA,SAAS0D,EAAOsF,GACd,OAAOM,EAOP,SAASA,EAAMJ,GACTF,GAAKA,EAAIzB,KAAK4B,KAAMD,GACxBzF,EAAK8D,KAAK4B,KAAMD,EAClB,CACF,CAKA,SAASzF,EAAKyF,EAAOK,GACnB,MAAMH,EAAOD,KAAKtC,MAAMQ,MAClB4B,EAAOE,KAAKrC,WAAWO,MAC7B,IAAK4B,EACH,MAAM,IAAIO,MAAM,iBAAmBN,EAAMxC,KAAO,OAAQ,OAAkB,CACxEoB,MAAOoB,EAAMpB,MACbK,IAAKe,EAAMf,MACR,oBACA,GAAIc,EAAK,GAAGvC,OAASwC,EAAMxC,KAChC,GAAI6C,EACFA,EAAYhC,KAAK4B,KAAMD,EAAOD,EAAK,QAC9B,EACWA,EAAK,IAAMrB,GACnBL,KAAK4B,KAAMD,EAAOD,EAAK,GACjC,CAEFG,EAAKvB,SAASM,IAAMJ,EAAMmB,EAAMf,IAClC,CAKA,SAASpB,IACP,OAAO,OAASoC,KAAKtC,MAAMQ,MAC7B,CAUA,SAASvE,IACPqG,KAAK3H,KAAKiI,6BAA8B,CAC1C,CAMA,SAAS9G,EAAqBuG,GAC5B,GAAIC,KAAK3H,KAAKiI,4BAA6B,CACxBN,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCY,MAAQ4B,OAAOC,SAASR,KAAKzB,eAAewB,GAAQ,IAC7DC,KAAK3H,KAAKiI,iCAA8BzJ,CAC1C,CACF,CAMA,SAAS0E,IACP,MAAMlD,EAAO2H,KAAKpC,SACLoC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvC0C,KAAOpI,CACd,CAMA,SAASmD,IACP,MAAMnD,EAAO2H,KAAKpC,SACLoC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvC2C,KAAOrI,CACd,CAMA,SAASiD,IAEH0E,KAAK3H,KAAKsI,iBACdX,KAAKhI,SACLgI,KAAK3H,KAAKsI,gBAAiB,EAC7B,CAMA,SAASvF,IACP,MAAM/C,EAAO2H,KAAKpC,SACLoC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCrH,MAAQ2B,EAAKuI,QAAQ,2BAA4B,IACtDZ,KAAK3H,KAAKsI,oBAAiB9J,CAC7B,CAMA,SAAS4E,IACP,MAAMpD,EAAO2H,KAAKpC,SACLoC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCrH,MAAQ2B,EAAKuI,QAAQ,eAAgB,GAC5C,CAMA,SAAShF,EAA4BmE,GACnC,MAAM1G,EAAQ2G,KAAKpC,SACbqC,EAAOD,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GAC5CkC,EAAK5G,MAAQA,EACb4G,EAAKY,YAAa,OAAoBb,KAAKzB,eAAewB,IAAQe,aACpE,CAMA,SAASjF,IACP,MAAMxD,EAAO2H,KAAKpC,SACLoC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCgD,MAAQ1I,CACf,CAMA,SAASsD,IACP,MAAMtD,EAAO2H,KAAKpC,SACLoC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCiD,IAAM3I,CACb,CAMA,SAASoC,EAAyBsF,GAChC,MAAME,EAAOD,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GAC5C,IAAKkC,EAAKgB,MAAO,CACf,MAAMA,EAAQjB,KAAKzB,eAAewB,GAAOhC,OACzCkC,EAAKgB,MAAQA,CACf,CACF,CAMA,SAAShE,IACP+C,KAAK3H,KAAK6I,8BAA+B,CAC3C,CAMA,SAASnE,EAAgCgD,GAC1BC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCkD,MAAsD,KAA9CjB,KAAKzB,eAAewB,GAAOoB,YAAY,GAAY,EAAI,CACtE,CAMA,SAAStE,IACPmD,KAAK3H,KAAK6I,kCAA+BrK,CAC3C,CAOA,SAASS,EAAYyI,GACnB,MAEMqB,EAFOpB,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GAEtBP,SACtB,IAAIgB,EAAO4C,EAASA,EAASrD,OAAS,GACjCS,GAAsB,SAAdA,EAAKjB,OAEhBiB,EAAO6C,KACP7C,EAAKE,SAAW,CACdC,MAAOC,EAAMmB,EAAMpB,OAEnBK,SAAKnI,GAEPuK,EAASpD,KAAKQ,IAEhBwB,KAAKtC,MAAMM,KAAKQ,EAClB,CAOA,SAAS3D,EAAWkF,GAClB,MAAMvB,EAAOwB,KAAKtC,MAAMQ,MACxBM,EAAK9H,OAASsJ,KAAKzB,eAAewB,GAClCvB,EAAKE,SAASM,IAAMJ,EAAMmB,EAAMf,IAClC,CAOA,SAAS1C,EAAiByD,GACxB,MAAMtC,EAAUuC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GAE/C,GAAIiC,KAAK3H,KAAKiJ,YAAa,CAIzB,OAHa7D,EAAQD,SAASC,EAAQD,SAASO,OAAS,GACnDW,SAASM,IAAMJ,EAAMmB,EAAMf,UAChCgB,KAAK3H,KAAKiJ,iBAAczK,EAE1B,EACKmJ,KAAK3H,KAAK6I,8BAAgCpK,EAAOE,eAAeuK,SAAS9D,EAAQF,QACpFjG,EAAY8G,KAAK4B,KAAMD,GACvBlF,EAAWuD,KAAK4B,KAAMD,GAE1B,CAOA,SAASjE,IACPkE,KAAK3H,KAAKiJ,aAAc,CAC1B,CAOA,SAASvF,IACP,MAAM1D,EAAO2H,KAAKpC,SACLoC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCrH,MAAQ2B,CACf,CAOA,SAAS2D,IACP,MAAM3D,EAAO2H,KAAKpC,SACLoC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCrH,MAAQ2B,CACf,CAOA,SAASqD,IACP,MAAMrD,EAAO2H,KAAKpC,SACLoC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCrH,MAAQ2B,CACf,CAOA,SAASkE,IACP,MAAM0D,EAAOD,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GAK5C,GAAIiC,KAAK3H,KAAKmJ,YAAa,CAEzB,MAAMC,EAAgBzB,KAAK3H,KAAKoJ,eAAiB,WACjDxB,EAAK1C,MAAQ,YAEb0C,EAAKwB,cAAgBA,SAEdxB,EAAKe,WACLf,EAAKc,KACd,aAESd,EAAKY,kBAELZ,EAAK5G,MAEd2G,KAAK3H,KAAKoJ,mBAAgB5K,CAC5B,CAOA,SAASoF,IACP,MAAMgE,EAAOD,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GAK5C,GAAIiC,KAAK3H,KAAKmJ,YAAa,CAEzB,MAAMC,EAAgBzB,KAAK3H,KAAKoJ,eAAiB,WACjDxB,EAAK1C,MAAQ,YAEb0C,EAAKwB,cAAgBA,SAEdxB,EAAKe,WACLf,EAAKc,KACd,aAESd,EAAKY,kBAELZ,EAAK5G,MAEd2G,KAAK3H,KAAKoJ,mBAAgB5K,CAC5B,CAOA,SAASuF,EAAgB2D,GACvB,MAAM2B,EAAS1B,KAAKzB,eAAewB,GAC7B4B,EAAW3B,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GAGhD4D,EAAStI,OAAQ,OAAaqI,GAE9BC,EAASd,YAAa,OAAoBa,GAAQZ,aACpD,CAOA,SAAS5E,IACP,MAAM0F,EAAW5B,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GAC1CrH,EAAQsJ,KAAKpC,SACbqC,EAAOD,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GAG5C,GADAiC,KAAK3H,KAAKmJ,aAAc,EACN,SAAdvB,EAAK1C,KAAiB,CAExB,MAAMC,EAAWoE,EAASpE,SAC1ByC,EAAKzC,SAAWA,CAClB,MACEyC,EAAK4B,IAAMnL,CAEf,CAOA,SAAS+F,IACP,MAAMpE,EAAO2H,KAAKpC,SACLoC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCiD,IAAM3I,CACb,CAOA,SAASqE,IACP,MAAMrE,EAAO2H,KAAKpC,SACLoC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCgD,MAAQ1I,CACf,CAOA,SAASuE,IACPoD,KAAK3H,KAAKmJ,iBAAc3K,CAC1B,CAOA,SAASkD,IACPiG,KAAK3H,KAAKoJ,cAAgB,WAC5B,CAOA,SAASjF,EAAsBuD,GAC7B,MAAM1G,EAAQ2G,KAAKpC,SACbqC,EAAOD,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GAG5CkC,EAAK5G,MAAQA,EAEb4G,EAAKY,YAAa,OAAoBb,KAAKzB,eAAewB,IAAQe,cAClEd,KAAK3H,KAAKoJ,cAAgB,MAC5B,CAOA,SAAS1G,EAA+BgF,GACtCC,KAAK3H,KAAKyJ,uBAAyB/B,EAAMxC,IAC3C,CAMA,SAASrC,EAA8B6E,GACrC,MAAM1H,EAAO2H,KAAKzB,eAAewB,GAC3BxC,EAAOyC,KAAK3H,KAAKyJ,uBAEvB,IAAIpL,EACJ,GAAI6G,EACF7G,GAAQ,OAAgC2B,EAAe,oCAATkF,EAA6C,GAAK,IAChGyC,KAAK3H,KAAKyJ,4BAAyBjL,MAC9B,CAELH,GADe,OAA8B2B,EAE/C,CACa2H,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCrH,OAASA,CAChB,CAMA,SAASyE,EAAyB4E,GACnBC,KAAKtC,MAAMQ,MACnBQ,SAASM,IAAMJ,EAAMmB,EAAMf,IAClC,CAMA,SAASrE,GAAuBoF,GAC9BlF,EAAWuD,KAAK4B,KAAMD,GACTC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCiD,IAAMhB,KAAKzB,eAAewB,EACjC,CAMA,SAASrF,GAAoBqF,GAC3BlF,EAAWuD,KAAK4B,KAAMD,GACTC,KAAKtC,MAAMsC,KAAKtC,MAAMK,OAAS,GACvCiD,IAAM,UAAYhB,KAAKzB,eAAewB,EAC7C,CAOA,SAASrI,KACP,MAAO,CACL6F,KAAM,aACNC,SAAU,GAEd,CAGA,SAAS1F,KACP,MAAO,CACLyF,KAAM,OACNkD,KAAM,KACNC,KAAM,KACNhK,MAAO,GAEX,CAGA,SAASyB,KACP,MAAO,CACLoF,KAAM,aACN7G,MAAO,GAEX,CAGA,SAAS6B,KACP,MAAO,CACLgF,KAAM,aACNsD,WAAY,GACZxH,MAAO,KACP0H,MAAO,KACPC,IAAK,GAET,CAGA,SAASrI,KACP,MAAO,CACL4E,KAAM,WACNC,SAAU,GAEd,CAGA,SAAS/F,KACP,MAAO,CACL8F,KAAM,UAEN0D,MAAO,EACPzD,SAAU,GAEd,CAGA,SAAS3E,KACP,MAAO,CACL0E,KAAM,QAEV,CAGA,SAASvE,KACP,MAAO,CACLuE,KAAM,OACN7G,MAAO,GAEX,CAGA,SAAS0C,KACP,MAAO,CACLmE,KAAM,QACNwD,MAAO,KACPC,IAAK,GACLa,IAAK,KAET,CAGA,SAASzK,KACP,MAAO,CACLmG,KAAM,OACNwD,MAAO,KACPC,IAAK,GACLxD,SAAU,GAEd,CAMA,SAAS9D,GAAKqG,GACZ,MAAO,CACLxC,KAAM,OACNwE,QAAwB,gBAAfhC,EAAMxC,KACfoB,MAAO,KACPqD,OAAQjC,EAAMN,QACdjC,SAAU,GAEd,CAMA,SAASlE,GAASyG,GAChB,MAAO,CACLxC,KAAM,WACNyE,OAAQjC,EAAMN,QACdwC,QAAS,KACTzE,SAAU,GAEd,CAGA,SAAS3D,KACP,MAAO,CACL0D,KAAM,YACNC,SAAU,GAEd,CAGA,SAASpD,KACP,MAAO,CACLmD,KAAM,SACNC,SAAU,GAEd,CAGA,SAAS6D,KACP,MAAO,CACL9D,KAAM,OACN7G,MAAO,GAEX,CAGA,SAAS2D,KACP,MAAO,CACLkD,KAAM,gBAEV,CACF,CA7+BS2E,CAAStL,EAATsL,EAAkB,QAAY,OAAMtL,GAASuL,WAAWC,OAAM,SAAa1L,EAAOC,GAAU,KACrG,CAs/BA,SAASiI,EAAMyD,GACb,MAAO,CACLxD,KAAMwD,EAAExD,KACRC,OAAQuD,EAAEvD,OACVC,OAAQsD,EAAEtD,OAEd,CAOA,SAAS7B,EAAUoF,EAAUC,GAC3B,IAAIzE,GAAS,EACb,OAASA,EAAQyE,EAAWxE,QAAQ,CAClC,MAAMrH,EAAQ6L,EAAWzE,GACrB0E,MAAMC,QAAQ/L,GAChBwG,EAAUoF,EAAU5L,GAEpBgM,EAAUJ,EAAU5L,EAExB,CACF,CAOA,SAASgM,EAAUJ,EAAUI,GAE3B,IAAIC,EACJ,IAAKA,KAAOD,EACV,GAAInM,EAAI6H,KAAKsE,EAAWC,GACtB,OAAQA,GACN,IAAK,iBACH,CACE,MAAMC,EAAQF,EAAUC,GACpBC,GACFN,EAASK,GAAK3E,QAAQ4E,GAExB,KACF,CACF,IAAK,aACH,CACE,MAAMA,EAAQF,EAAUC,GACpBC,GACFN,EAASK,GAAK3E,QAAQ4E,GAExB,KACF,CACF,IAAK,QACL,IAAK,OACH,CACE,MAAMA,EAAQF,EAAUC,GACpBC,GACFvE,OAAOC,OAAOgE,EAASK,GAAMC,GAE/B,KACF,EAKV,CAGA,SAASnE,EAAeoE,EAAMD,GAC5B,MAAIC,EACI,IAAIxC,MAAM,iBAAmBwC,EAAKtF,KAAO,OAAQ,OAAkB,CACvEoB,MAAOkE,EAAKlE,MACZK,IAAK6D,EAAK7D,MACP,0BAA4B4D,EAAMrF,KAAO,OAAQ,OAAkB,CACtEoB,MAAOiE,EAAMjE,MACbK,IAAK4D,EAAM5D,MACR,aAEC,IAAIqB,MAAM,oCAAsCuC,EAAMrF,KAAO,OAAQ,OAAkB,CAC3FoB,MAAOiE,EAAMjE,MACbK,IAAK4D,EAAM5D,MACR,kBAET,C","sources":["webpack://silkforest-web/../../node_modules/mdast-util-from-markdown/lib/index.js"],"sourcesContent":["/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}"],"names":["own","hasOwnProperty","fromMarkdown","value","encoding","options","undefined","config","transforms","canContainEols","enter","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","heading","blockQuote","characterEscape","characterReference","codeFenced","codeFlow","codeFencedFenceInfo","buffer","codeFencedFenceMeta","codeIndented","codeText","codeTextData","data","codeFlowValue","definition","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","html","htmlFlowData","htmlText","htmlTextData","image","label","listItem","listItemValue","onenterlistitemvalue","listOrdered","list","onenterlistordered","listUnordered","paragraph","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","thematicBreak","exit","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","lineEnding","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","events","tree","type","children","context","stack","tokenStack","resume","listStack","index","length","push","prepareList","pop","handler","call","Object","assign","sliceSerialize","tail","defaultOnError","position","start","point","line","column","offset","end","lineIndex","firstBlankLineIndex","atMarker","containerBalance","listSpread","event","tailIndex","tailEvent","_spread","splice","item","create","and","open","token","this","node","errorHandler","close","onExitError","Error","expectingFirstListItemValue","Number","parseInt","lang","meta","flowCodeInside","replace","identifier","toLowerCase","title","url","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","text","atHardBreak","includes","inReference","referenceType","string","ancestor","fragment","alt","characterReferenceType","ordered","spread","checked","compiler","document","write","d","combined","extensions","Array","isArray","extension","key","right","left"],"sourceRoot":""}