{"version":3,"file":"static/js/vendor.micromark-factory-label.b744c0840a8cba82b2c9.js","mappings":"8IAyCO,SAASA,EAAaC,EAASC,EAAIC,EAAKC,EAAMC,EAAYC,GAC/D,MAAMC,EAAOC,KACb,IAEIC,EAFAC,EAAO,EAGX,OAYA,SAAeC,GAMb,OALAV,EAAQW,MAAMR,GACdH,EAAQW,MAAMP,GACdJ,EAAQY,QAAQF,GAChBV,EAAQa,KAAKT,GACbJ,EAAQW,MAAMN,GACPS,CACT,EAYA,SAASA,EAAQJ,GACf,OAAID,EAAO,KAAgB,OAATC,GAA0B,KAATA,GAAwB,KAATA,IAAgBF,GAMzD,KAATE,IAAgBD,GAAQ,2BAA4BH,EAAKS,OAAOC,WACvDd,EAAIQ,GAEA,KAATA,GACFV,EAAQa,KAAKR,GACbL,EAAQW,MAAMP,GACdJ,EAAQY,QAAQF,GAChBV,EAAQa,KAAKT,GACbJ,EAAQa,KAAKV,GACNF,IAIL,QAAmBS,IACrBV,EAAQW,MAAM,cACdX,EAAQY,QAAQF,GAChBV,EAAQa,KAAK,cACNC,IAETd,EAAQW,MAAM,cAAe,CAC3BM,YAAa,WAERC,EAAYR,GACrB,CAYA,SAASQ,EAAYR,GACnB,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,IAAe,QAAmBA,IAASD,IAAS,KACtFT,EAAQa,KAAK,eACNC,EAAQJ,KAEjBV,EAAQY,QAAQF,GACXF,IAAMA,IAAQ,QAAcE,IACjB,KAATA,EAAcS,EAAcD,EACrC,CAYA,SAASC,EAAYT,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCV,EAAQY,QAAQF,GAChBD,IACOS,GAEFA,EAAYR,EACrB,CACF,C","sources":["webpack://silkforest-web/../../node_modules/micromark-factory-label/index.js"],"sourcesContent":["/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > ðŸ‘‰ **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once weâ€™ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesnâ€™t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}"],"names":["factoryLabel","effects","ok","nok","type","markerType","stringType","self","this","seen","size","code","enter","consume","exit","atBreak","parser","constructs","contentType","labelInside","labelEscape"],"sourceRoot":""}