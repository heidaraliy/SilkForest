extraction_writer: starting code extraction...

---- File Tree ----

.
├── apps
│   └── silkforest-web
│       ├── package.json
│       ├── postcss.config.js
│       ├── public
│       ├── src
│       │   ├── App.tsx
│       │   ├── assets
│       │   ├── components
│       │   │   ├── ErrorBoundary.tsx
│       │   │   ├── about
│       │   │   │   └── About.tsx
│       │   │   ├── docs
│       │   │   │   ├── Docs.tsx
│       │   │   │   ├── DocsContent.tsx
│       │   │   │   ├── DocsData.ts
│       │   │   │   └── DocsSidebar.tsx
│       │   │   ├── home
│       │   │   │   ├── Footer.tsx
│       │   │   │   ├── Intro.tsx
│       │   │   │   ├── Navbar.tsx
│       │   │   │   └── RouterDefinitions.tsx
│       │   │   └── products
│       │   │       ├── ProductCard.tsx
│       │   │       ├── ProductData.ts
│       │   │       ├── ProductList.tsx
│       │   │       └── Products.tsx
│       │   ├── config
│       │   │   └── urls.ts
│       │   ├── docs
│       │   │   ├── general
│       │   │   └── silkghost
│       │   ├── index.tsx
│       │   └── types
│       │       └── declarations.d.ts
│       ├── tailwind.config.js
│       ├── tsconfig.json
│       └── webpack.config.js
└── package.json

16 directories, 24 files

---- Code Files ----


---- ./package.json ----

{
  "private": true,
  "name": "silkforest",
  "version": "1.0.0",
  "workspaces": [
    "apps/*",
    "packages/*"
  ],
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "scripts": {
    "build:web": "yarn workspace silkforest-web build",
    "build": "yarn build:web",
    "start": "yarn workspace silkforest-web start",
    "ultra-clean": "cd /Users/heidaraliy/Documents/programs/SilkForest/ rm -rf node_modules rm -rf rimraf node_modules /*/node_modules rm -rf apps/*/node_modules rm -rf apps/*/dist yarn cache clean",
    "reinstall": "yarn ultra-clean && yarn install && yarn build && bash extraction_writer.sh",
    "extract_repo": "bash extraction_writer.sh"
  }
}

---- ./apps/silkforest-web/tailwind.config.js ----

module.exports = {
  content: [
    "./public/index.html",
    "./src/**/*.{js,jsx,ts,tsx}",
    "../../packages/**/*.{js,jsx,ts,tsx}",
  ],
  darkMode: false,
  theme: {
    extend: {
      backgroundImage: {
        "steel-gradient":
          "linear-gradient(to top left, #c7d2fe, #9fa8db, #71769d)",
      },
    },
    fontFamily: {
      arimo: ["Arimo", "sans-serif"],
      vidaloka: ["Vidaloka", "sans-serif"],
    },
  },
  variants: {
    extend: {},
  },
  plugins: [],
};

---- ./apps/silkforest-web/webpack.config.js ----

const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const ReactRefreshWebpackPlugin = require("@pmmmwh/react-refresh-webpack-plugin");

const isDevelopment = process.env.NODE_ENV !== "production";

module.exports = {
  entry: "./src/index.tsx",
  output: {
    filename: isDevelopment ? "[name].js" : "[name].[contenthash].js",
    path: path.resolve(__dirname, "dist"),
    publicPath: "/",
    clean: true,
  },
  mode: isDevelopment ? "development" : "production",
  devtool: isDevelopment ? "cheap-module-source-map" : "source-map",
  resolve: {
    extensions: [".tsx", ".ts", ".js"],
    alias: {
      "@silkforest/core": path.resolve(__dirname, "../../packages/core/src"),
      "@silkforest/audioengine": path.resolve(
        __dirname,
        "../../packages/audioengine/src"
      ),
    },
    symlinks: true,
  },
  module: {
    rules: [
      {
        test: /\.(ts|tsx|js|jsx)$/,
        include: [
          path.resolve(__dirname, "src"),
          path.resolve(__dirname, "../../packages"),
        ],
        use: [
          {
            loader: "babel-loader",
            options: {
              presets: [
                "@babel/preset-env",
                "@babel/preset-react",
                "@babel/preset-typescript",
              ],
              plugins: [
                isDevelopment && require.resolve("react-refresh/babel"),
              ].filter(Boolean),
              cacheDirectory: false,
            },
          },
        ],
      },
      {
        test: /\.css$/,
        use: ["style-loader", "css-loader", "postcss-loader"],
      },
      {
        test: /\.(png|jpg|jpeg|gif|svg|eot|ttf|woff|woff2)$/,
        type: "asset/resource",
      },
      {
        test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)$/i,
        type: "asset/resource",
        generator: {
          filename: "assets/media/[name][hash][ext]",
        },
      },
      {
        test: /\.md$/,
        type: "asset/source",
      },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "public/index.html",
    }),
    isDevelopment && new ReactRefreshWebpackPlugin(),
  ].filter(Boolean),
  devServer: {
    static: {
      directory: path.join(__dirname, "public"),
    },
    historyApiFallback: true,
    historyApiFallback: {
      disableDotRule: true,
    },
    hot: true,
    open: true,
    port: 3000,
    watchFiles: [path.resolve(__dirname, "src/**/*")],
  },
};

---- ./apps/silkforest-web/package.json ----

{
  "name": "silkforest-web",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "start": "webpack serve --config webpack.config.js --mode development",
    "build": "webpack --config webpack.config.js --mode production"
  },
  "dependencies": {
    "@types/react": "^18.3.11",
    "@types/uuid": "^10.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-markdown": "^9.0.1",
    "react-router-dom": "^6.11.1",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.0",
    "uuid": "^10.0.0"
  },
  "peerDependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@babel/core": "^7.21.4",
    "@babel/preset-env": "^7.21.4",
    "@babel/preset-react": "^7.18.6",
    "@babel/preset-typescript": "^7.21.4",
    "@pmmmwh/react-refresh-webpack-plugin": "^0.5.10",
    "@types/react-dom": "^18.3.1",
    "autoprefixer": "^10.4.20",
    "babel-loader": "^9.1.2",
    "css-loader": "^7.1.2",
    "html-webpack-plugin": "^5.5.0",
    "postcss": "^8.4.47",
    "postcss-loader": "^8.1.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-refresh": "^0.14.0",
    "style-loader": "^4.0.0",
    "tailwindcss": "^3.4.14",
    "typescript": "^5.0.4",
    "webpack": "^5.83.1",
    "webpack-cli": "^5.1.1",
    "webpack-dev-server": "^5.1.0"
  }
}

---- ./apps/silkforest-web/tsconfig.json ----

{
  "compilerOptions": {
    "target": "es5",
    "module": "commonjs",
    "jsx": "react",
    "strict": true,
    "moduleResolution": "node",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*", "types/**/*"],
  "exclude": ["node_modules", "build"]
}

---- ./apps/silkforest-web/postcss.config.js ----

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

---- ./apps/silkforest-web/src/index.tsx ----

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css";
import ErrorBoundary from "./components/ErrorBoundary";
import { BrowserRouter } from "react-router-dom";

const container = document.getElementById("root");
if (!container) {
  throw new Error("Failed to find the root element.");
}

const root = ReactDOM.createRoot(container);
root.render(
  <React.StrictMode>
    <ErrorBoundary>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </ErrorBoundary>
  </React.StrictMode>
);

---- ./apps/silkforest-web/src/App.tsx ----

import React from "react";
import Navbar from "./components/home/Navbar";
import Footer from "./components/home/Footer";
import RouterDefinitions from "./components/home/RouterDefinitions";

const App: React.FC = () => {
  return (
    <div>
      <Navbar />
      <RouterDefinitions />
      <Footer />
    </div>
  );
};

export default App;

---- ./apps/silkforest-web/src/types/declarations.d.ts ----

declare module "*.png" {
  const value: string;
  export default value;
}

declare module "*.jpg" {
  const value: string;
  export default value;
}

declare module "*.jpeg" {
  const value: string;
  export default value;
}

declare module "*.gif" {
  const value: string;
  export default value;
}

declare module "*.mp4" {
  const value: string;
  export default value;
}

declare module "*.svg" {
  import * as React from "react";

  export const ReactComponent: React.FunctionComponent<
    React.SVGProps<SVGSVGElement> & { title?: string }
  >;

  const src: string;
  export default src;
}

declare module "*.md" {
  const value: string;
  export default value;
}

---- ./apps/silkforest-web/src/config/urls.ts ----

const isDevelopment = process.env.NODE_ENV === 'development';

const BASE_URL = isDevelopment 
  ? 'http://localhost:3000' 
  : 'https://silkforest.app';

export const URLS = {
  docs: (section: string) => `${BASE_URL}/docs#${section}`,
  downloads: (product: string) => `${BASE_URL}/downloads/${product}`,
  home: () => BASE_URL,
}; 
---- ./apps/silkforest-web/src/components/home/Navbar.tsx ----

import React, { useEffect, useState } from "react";
import { NavLink } from "react-router-dom";
import SilkForestBackground from "../../assets/SilkForestNavbarBG.png";
import SilkForest from "../../assets/SilkForest.png";

const Navbar: React.FC = () => {
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);

  // Handle responsiveness
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768);
    };

    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  return (
    <nav
      className={`fixed top-0 left-0 right-0 z-50 space-x-2 text-xl tracking-tight font-bold font-arimo flex h-[5.5rem] items-center ${
        isMobile ? "flex-col" : "flex-row"
      } shadow-2xl border-b-2 border-zinc-400`}
      style={{
        backgroundImage: `url(${SilkForestBackground})`,
        backgroundSize: "cover",
        backgroundPosition: "center",
      }}
    >
      <div className="flex w-full justify-between">
        <div className="flex">
          <NavLink to="/">
            <img
              src={SilkForest}
              className={`pointer-events-auto hover:scale-105 transition-all cursor-pointer duration-300 ${
                isMobile ? "w-[8rem]" : "w-[12rem]"
              } w-[12rem] m-2`}
              alt="SilkForest Logo"
            />
          </NavLink>
          <NavLink to="/products">
            <div className="hover:bg-[#555975]/50 hover:rounded-md">
              <p className="drop-shadow-2xl text-zinc-50 mt-5 flex mx-6">
                Products
              </p>
            </div>
          </NavLink>
          <NavLink to="/docs">
            <div className="hover:bg-[#555975]/50 hover:rounded-md">
              <p className="drop-shadow-2xl text-zinc-50 mt-5 flex mx-6">
                Docs
              </p>
            </div>
          </NavLink>
          {/* <NavLink to="/about">
            <div className="hover:bg-[#555975]/50 hover:rounded-md">
              <p className="drop-shadow-2xl text-zinc-50 mt-5 flex mx-6">
                About
              </p>
            </div>
          </NavLink> */}
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

---- ./apps/silkforest-web/src/components/home/Intro.tsx ----

import React from "react";
import IntroVideo from "../../assets/intro.mp4";

const Intro: React.FC = () => {
  return (
    <div className="flex justify-center p-8 mt-12">
      <div className="font-arimo tracking-tight text-xl max-w-5xl text-gray-700">
        <div className="my-8 text-3xl text-center shadow-2xl">
          <video src={IntroVideo} className="rounded-md" autoPlay muted />
        </div>

        <div className="text-2xl font-bold">
          Shape your sound, effortlessly.
        </div>
        <br />
        <div className="text-lg max-w-4xl">
          <span className="font-vidaloka">SilkForest</span> is a suite of
          plugins crafted to transform your sound into{" "}
          <b>rich, ambient expressions</b>. With tools designed to{" "}
          <b>weave ethereal soundscapes</b>, sculpt warm, resonant pads and
          synths, and push vocal production into uncharted territories,{" "}
          <span className="font-vidaloka">SilkForest</span> enables you to
          create music that <b>transcends conventional boundaries</b> and
          embodies a sense of <b>otherworldly depth and artistry</b>.
        </div>
        <br />
        <hr />
        <br />

        <div className="text-2xl font-bold">
          Designed for clarity and control.
        </div>
        <br />
        <div className="text-lg max-w-4xl">
          By removing unnecessary noise and focusing on the most impactful
          parameters, <span className="font-vidaloka">SilkForest</span> empowers
          intuitive sound shaping. Elegant, focused interfaces combined with
          advanced audio processing make it easy to edit, test, and refine
          sounds with precision.
        </div>
        <br />
        <hr />
        <br />

        <div className="text-2xl font-bold">Built for everyone.</div>
        <br />
        <div className="text-lg max-w-4xl">
          <span className="font-vidaloka">SilkForest</span> is a passion project
          born from years of music production and sound design experience. As
          someone who's benefited from the incredible tools created by the audio
          community, I want to give back by making these plugins completely
          free. I think that powerful creative tools should be accessible to
          everyone, enabling artists at any level to explore and expand their
          sonic horizons without barriers.
        </div>
      </div>
    </div>
  );
};

export default Intro;

---- ./apps/silkforest-web/src/components/home/Footer.tsx ----

import React from "react";

const Footer: React.FC = () => {
  return (
    <footer className="p-4 text-center text-gray-700 font-arimo border-t-2 border-zinc-400 shadow-2xl">
      &copy; {new Date().getFullYear()} SilkForest. All rights reserved.
    </footer>
  );
};

export default Footer;

---- ./apps/silkforest-web/src/components/home/RouterDefinitions.tsx ----

import React from "react";
import { Route, Routes, useLocation } from "react-router-dom";
import Intro from "./Intro";
import Products from "../products/Products";
import Docs from "../docs/Docs";
import About from "../about/About";

const ScrollToHashElement = () => {
  const location = useLocation();

  React.useEffect(() => {
    if (location.pathname === "/docs" && location.hash) {
      const targetId = location.hash.slice(1);
      const element = document.getElementById(targetId);
      if (element) {
        setTimeout(() => {
          const docsContent = document.querySelector(".docs-content");
          if (docsContent && docsContent instanceof HTMLElement) {
            // Calculate the offset relative to the container
            const topOffset = element.offsetTop - docsContent.offsetTop;
            docsContent.scrollTo({
              top: topOffset - 100, // Adjust if needed
              behavior: "smooth",
            });
          }
        }, 200); // A short delay to ensure content is rendered
      }
    }
  }, [location]);

  return null;
};

const RouterDefinitions: React.FC = () => (
  <>
    <ScrollToHashElement />
    <Routes>
      <Route path="/" element={<Intro />} />
      <Route path="/products" element={<Products />} />
      <Route path="/docs" element={<Docs />} />
      <Route path="/about" element={<About />} />
    </Routes>
  </>
);

export default RouterDefinitions;

---- ./apps/silkforest-web/src/components/products/ProductList.tsx ----

import React from "react";
import ProductCard from "./ProductCard";
import { Product, AppType } from "./ProductData";

interface ProductListProps {
  products: Product[];
}

const ProductList: React.FC<ProductListProps> = ({ products }) => {
  const categorizedProducts: Record<AppType, Product[]> = {
    plugin: [],
    webApplication: [],
  };

  products.forEach((product) => {
    categorizedProducts[product.appType].push(product);
  });

  return (
    <div className="container mx-auto p-4">
      {/* plugins section */}
      {categorizedProducts.plugin.length > 0 && (
        <section className="mb-8">
          <h2 className="font-bold mb-4">Plugins</h2>
          <div className="flex flex-wrap justify-center">
            {categorizedProducts.plugin.map((product) => (
              <ProductCard key={product.id} product={product} />
            ))}
          </div>
        </section>
      )}

      {/* web applications section */}
      {categorizedProducts.webApplication.length > 0 && (
        <section>
          <h2 className="font-bold mb-4">Web Applications</h2>
          <div className="flex flex-wrap justify-center">
            {categorizedProducts.webApplication.map((product) => (
              <ProductCard key={product.id} product={product} />
            ))}
          </div>
        </section>
      )}
    </div>
  );
};

export default ProductList;

---- ./apps/silkforest-web/src/components/products/ProductCard.tsx ----

import React from "react";
import { Product } from "./ProductData";

interface ProductCardProps {
  product: Product;
}

const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  const comingSoon = false;

  return (
    <div
      className="rounded-md shadow-[15px_35px_60px_-15px_rgba(0,0,0,0.6)] p-4 max-w-3xl m-4 border-4 border-zinc-700"
      style={{ backgroundColor: product.background }}
    >
      <div className="flex items-center justify-center space-x-2">
        <img
          src={product.logo}
          alt={product.name}
          className="h-auto"
          style={{ width: product.logoWidth }}
        />
      </div>
      <p className="text-zinc-50 my-4 font-arimo text-center text-lg">
        <span className="font-vidaloka">{product.name}</span>{" "}
        {product.description}
      </p>
      <div className="flex space-x-4 justify-center my-8">
        {product.status === "available" ? (
          <>
            {product.appType !== "webApplication" ? (
              <a
                href={product.documentationUrl}
                className="hover:bg-zinc-200 border-zinc-600 border-2 rounded-md bg-zinc-50 px-2 py-2 font-arimo font-bold text-gray-700 flex items-center space-x-1"
                target="_self"
                rel="noopener noreferrer"
              >
                <span className="material-symbols-outlined text-gray-700">
                  library_books
                </span>
                <span>Documentation</span>
              </a>
            ) : (
              <></>
            )}
            <a
              href={product.downloadUrl}
              className="hover:bg-zinc-200 border-zinc-600 border-2 rounded-md bg-zinc-50 px-2 py-2 font-arimo font-bold text-gray-700 flex items-center space-x-1"
              target="_self"
              rel="noopener noreferrer"
            >
              <span className="material-symbols-outlined text-gray-700">
                {product.appType === "webApplication" ? "public" : "download"}
              </span>
              <span>
                {product.appType === "webApplication"
                  ? "Launch " + product.name
                  : "Download"}
              </span>
            </a>
          </>
        ) : (
          <div className="hover:bg-zinc-200 hover:cursor-not-allowed border-zinc-600 border-2 rounded-md bg-zinc-50 px-2 py-2 font-arimo font-bold text-gray-700 flex items-center space-x-1 opacity-70">
            Coming soon!
          </div>
        )}
      </div>
    </div>
  );
};

export default ProductCard;

---- ./apps/silkforest-web/src/components/products/ProductData.ts ----

import SilkGhost from "../../assets/SilkGhost.png";
import SilkShift from "../../assets/SilkShift.png";
import SilkAmbience from "../../assets/SilkAmbience.png";
import SilkVerb from "../../assets/SilkVerb.png";
import { URLS } from "../../config/urls";

export type AppType = "plugin" | "webApplication";

export interface Product {
  id: string;
  name: string;
  logo: string;
  logoWidth: string;
  description: string;
  documentationUrl?: string;
  downloadUrl?: string;
  background: string;
  appType: AppType;
  status: "available" | "coming-soon";
}

export const PRODUCTS: Product[] = [
  {
    id: "silkghost",
    name: "SilkGhost",
    logo: SilkGhost,
    logoWidth: "18rem",
    description:
      "is a reverberation engine that creates haunting, ethereal soundscapes that linger like spectral echoes in your mix, gently enveloping each note in a surreal shimmer.",
    documentationUrl: URLS.docs("silk-ghost-introduction"),
    downloadUrl: URLS.downloads("silkghost"),
    background: "#71769d",
    appType: "plugin",
    status: "available",
  },
  {
    id: "silkshift",
    name: "SilkShift",
    logo: SilkShift,
    logoWidth: "18rem",
    description:
      "isn’t just a pitch shifter — it’s a way to generate complex sounds. Layer your sounds and apply pitch shift and modulation to each layer individually.",
    documentationUrl: URLS.docs("silkghost-introduction"),
    downloadUrl: URLS.downloads("silkghost"),
    background: "#c14444",
    appType: "plugin",
    status: "coming-soon",
  },
  {
    id: "silkambience",
    name: "SilkAmbience",
    logo: SilkAmbience,
    logoWidth: "22rem",
    description:
      "isolates pad-like frequencies in your sounds, splicing and transforming them into lush, textured layers of rich, evolving soundscapes that fill your mix beautifully.",
    documentationUrl: "",
    downloadUrl: "",
    background: "#B447C1",
    appType: "plugin",
    status: "coming-soon",
  },
  {
    id: "silkverb",
    name: "SilkVerb",
    logo: SilkVerb,
    logoWidth: "18rem",
    description:
      "is a quick and dirty way to create slowed and reverberated tracks. Set a reverb tail, control your dry and wet mix, and shift the track to your desire.",
    documentationUrl: "",
    downloadUrl: "https://silkmodulate.vercel.app",
    background: "#3F4DA8",
    appType: "webApplication",
    status: "available",
  },
];

---- ./apps/silkforest-web/src/components/products/Products.tsx ----

import React from "react";
import { PRODUCTS, AppType } from "./ProductData";
import ProductCard from "./ProductCard";

const Products: React.FC = () => {
  const categories: {
    type: AppType;
    title: string;
    description: string;
  }[] = [
    {
      type: "plugin",
      title: "Plugins",
      description: "Explore a wide range of transformative audio plugins.",
    },
    {
      type: "webApplication",
      title: "Web Applications",
      description:
        "Built directly on the web, these web applications are intuitive and easy to use.",
    },
  ];

  return (
    <div className="flex flex-col items-center p-8 font-arimo tracking-tight mt-20">
      {categories.map((category) => {
        // filter products based on the current category type.
        const filteredProducts = PRODUCTS.filter(
          (product) => product.appType === category.type
        );

        // if no products exist for the category, skip rendering.
        if (filteredProducts.length === 0) return null;

        return (
          <section key={category.type} className="w-full mb-12">
            <div className="w-full text-center mb-8">
              <h2 className="text-3xl font-bold text-gray-700">
                {category.title}
              </h2>
              <p className="text-gray-700 my-2 text-xl">
                {category.description}
              </p>
            </div>
            <div className="flex flex-wrap justify-center">
              {filteredProducts.map((product) => (
                <ProductCard key={product.id} product={product} />
              ))}
            </div>
          </section>
        );
      })}
    </div>
  );
};

export default Products;

---- ./apps/silkforest-web/src/components/about/About.tsx ----

import React from "react";

const Docs: React.FC = () => {
  return (
    <div className="flex h-[calc(100vh-4rem)] overflow-hidden p-20 justify-center items-center">
      <span
        className="text-center text-lg font-arimo tracking-tight"
        style={{ maxWidth: "800px" }}
      >
        hey, it's me.
        <br />
        <br />
        there's nothing <i>that</i> important that i can really add here...
        <br />
        <br />
        <i className="text-sm">(at least, not yet.)</i>
        <br />
        <br />
        <b>i'm building some pretty cool stuff though, so stay a while.</b>
      </span>
    </div>
  );
};

export default Docs;

---- ./apps/silkforest-web/src/components/docs/DocsData.ts ----

import SilkGhostDocumentation from "../../docs/silkghost/SilkGhostDocumentation.md";
import Introduction from "../../docs/general/Introduction.md";

export interface DocSection {
  title: string;
  children?: DocEntry[];
}

export interface DocEntry {
  id: string;
  title: string;
  file: string;
}

export const DOCS_SECTIONS: DocSection[] = [
  {
    title: "SilkForest",
    children: [
      {
        id: "general-introduction",
        title: "Introduction",
        file: Introduction,
      },
    ],
  },
  {
    title: "SilkGhost",
    children: [
      {
        id: "silk-ghost-introduction",
        title: "Introduction",
        file: SilkGhostDocumentation,
      },
      {
        id: "silk-ghost-key-features",
        title: "Key Features",
        file: SilkGhostDocumentation,
      },
      {
        id: "silk-ghost-getting-started",
        title: "Getting Started",
        file: SilkGhostDocumentation,
      },
      {
        id: "silk-ghost-parameter-reference",
        title: "Parameter Reference",
        file: SilkGhostDocumentation,
      },
      {
        id: "silk-ghost-creative-applications",
        title: "Creative Applications",
        file: SilkGhostDocumentation,
      },
    ],
  },
];

---- ./apps/silkforest-web/src/components/docs/DocsSidebar.tsx ----

import React, { useEffect, useState } from "react";
import { Link, useLocation } from "react-router-dom";
import { DOCS_SECTIONS } from "./DocsData";
import SilkDocs from "../../assets/SilkDocs.png";
import SilkForestSidebarBackground from "../../assets/SilkForestSidebarBG.png";

const DocsSidebar: React.FC = () => {
  const [activeId, setActiveId] = useState<string>("");
  const location = useLocation();

  useEffect(() => {
    // Create an Intersection Observer to detect which section is in view
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setActiveId(entry.target.id);
            // Update URL hash without triggering full navigation
            const newUrl = `${window.location.pathname}#${entry.target.id}`;
            window.history.replaceState(null, "", newUrl);
          }
        });
      },
      {
        rootMargin: "-20% 0px -80% 0px",
      }
    );

    // Observe all section headings
    document.querySelectorAll("h1[id], h2[id], h3[id]").forEach((section) => {
      observer.observe(section);
    });

    return () => observer.disconnect();
  }, []);

  // Update activeId when hash changes (e.g., on direct navigation)
  useEffect(() => {
    const hash = location.hash.slice(1);
    if (hash) {
      setActiveId(hash);
    }
  }, [location]);

  return (
    <div
      className="w-72 border-r-2 border-zinc-400 overflow-y-auto h-full"
      style={{
        backgroundImage: `url(${SilkForestSidebarBackground})`,
        backgroundSize: "cover",
        backgroundPosition: "center bottom",
      }}
    >
      <div className="sticky top-0 p-6">
        <div className="text-center m-4">
          <img src={SilkDocs} alt="SilkDocs" className="mx-auto w-48" />
        </div>
        <nav className="space-y-6 bg-[#4d516e]/75 rounded-md p-4 border-zinc-400 border-2">
          {DOCS_SECTIONS.map((section) => (
            <div key={section.title} className="mb-6">
              <div className="text-2xl text-zinc-50 mb-3 p-2 font-vidaloka">
                {section.title}
              </div>
              <ul className="space-y-3 pl-2 text-xl">
                {section.children?.map((entry) => (
                  <li key={entry.id}>
                    <Link
                      to={`/docs#${entry.id}`} // IMPORTANT: full route + hash
                      className={`block text-base transition-all duration-300 rounded-md p-1.5 font-arimo tracking-tight ${
                        activeId === entry.id
                          ? "text-zinc-50 font-semibold bg-zinc-300/20 scale-110 border-zinc-300/70 border-2"
                          : "text-zinc-100 font-extralight hover:bg-zinc-300/20 hover:text-zinc-50 hover:scale-105 transition-all duration-300 cursor-pointer"
                      }`}
                    >
                      {entry.title}
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </nav>
      </div>
    </div>
  );
};

export default DocsSidebar;

---- ./apps/silkforest-web/src/components/docs/Docs.tsx ----

import React from "react";
import DocsSidebar from "./DocsSidebar";
import DocsContent from "./DocsContent";

const Docs: React.FC = () => {
  return (
    <div className="flex h-[calc(100vh-4rem)] overflow-hidden mt-20">
      <DocsSidebar />
      <DocsContent />
    </div>
  );
};

export default Docs;

---- ./apps/silkforest-web/src/components/docs/DocsContent.tsx ----

import React, { useEffect, useState } from "react";
import ReactMarkdown, { Components } from "react-markdown";
import remarkGfm from "remark-gfm";
import rehypeRaw from "rehype-raw";
import SilkForest from "../../assets/SilkForest.png";
import SilkGhost from "../../assets/SilkGhost.png";
import SilkGhostPluginWindow from "../../assets/SilkGhostPluginWindow.png";
import { DOCS_SECTIONS } from "./DocsData";
import { PRODUCTS } from "../products/ProductData";

const LOGO_MAP: Record<string, string> = {
  SilkForest,
  SilkGhost,
};

const IMAGE_MAP: Record<string, string> = {
  SilkGhostPluginWindow,
};

const BACKGROUND_MAP: Record<string, string> = PRODUCTS.reduce(
  (acc, product) => ({
    ...acc,
    [product.name]: product.background,
  }),
  {}
);

const DocsContent: React.FC = () => {
  const [combinedMarkdown, setCombinedMarkdown] = useState<string>("");

  useEffect(() => {
    // Get unique markdown files
    const uniqueFiles = new Set<string>();
    DOCS_SECTIONS.forEach((section) => {
      section.children?.forEach((entry) => {
        uniqueFiles.add(entry.file);
      });
    });

    // Combine unique markdown files
    const content = Array.from(uniqueFiles).join("\n\n---\n\n");
    setCombinedMarkdown(content);
  }, []);

  const processMarkdown = (content: string) => {
    return content.replace(
      /\[IMAGE:(.*?):(.*?)\]/g,
      (match, imageName, imageType) => {
        const imageSrc = IMAGE_MAP[imageName];
        if (!imageSrc) {
          console.warn(`Image not found: ${imageName}`);
          return "";
        }
        return `<img 
          src="${imageSrc}" 
          alt="${imageName}" 
          class="doc-image doc-image-${imageType}"
          style="border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1);"
        />`;
      }
    );
  };

  return (
    <div className="docs-content flex-1 overflow-y-auto h-full bg-zinc-50 font-arimo tracking-tight">
      <div className="max-w-4xl mx-auto p-8 md:p-12">
        <ReactMarkdown
          remarkPlugins={[remarkGfm]}
          rehypePlugins={[rehypeRaw]}
          components={{
            h1: (props) => {
              const text = String(props.children);
              const logoMatch = text.match(/\[LOGO:(.*?)\]/);
              if (logoMatch) {
                const logoKey = logoMatch[1];
                const logoSrc = LOGO_MAP[logoKey];
                const bgColor = BACKGROUND_MAP[logoKey] || "#71769d";

                return (
                  <h1
                    className="text-4xl font-bold mb-8 text-zinc-800 flex justify-center"
                    {...props}
                  >
                    <div
                      className="rounded-lg p-4 shadow-2xl border-zinc-700 border-[3px]"
                      style={{ backgroundColor: bgColor }}
                    >
                      <img src={logoSrc} alt={logoKey} className="w-[24rem]" />
                    </div>
                  </h1>
                );
              }

              return (
                <h1
                  className="text-4xl font-bold mb-8 text-zinc-800"
                  {...props}
                >
                  {props.children}
                </h1>
              );
            },
            // Add custom styling for h2, h3, etc.
            h2: (props) => (
              <h2
                className="text-3xl font-semibold mb-6 text-zinc-800"
                {...props}
              >
                {props.children}
              </h2>
            ),
            h3: (props) => (
              <h3
                className="text-2xl font-semibold mb-4 text-zinc-800"
                {...props}
              >
                {props.children}
              </h3>
            ),
            h4: (props) => (
              <h4 className="text-xl font-medium mb-3 text-zinc-800" {...props}>
                {props.children}
              </h4>
            ),
            p: (props) => (
              <p
                className="mb-6 text-zinc-700 leading-relaxed text-lg"
                {...props}
              />
            ),
            ul: (props) => (
              <ul
                className="list-disc pl-8 mb-6 text-zinc-700 space-y-2"
                {...props}
              />
            ),
            ol: (props) => (
              <ol
                className="list-decimal pl-8 mb-6 text-zinc-700 space-y-2"
                {...props}
              />
            ),
            code: (props) => (
              <code
                className="bg-zinc-100 rounded px-2 py-1 text-sm text-zinc-800"
                {...props}
              />
            ),
            pre: (props) => (
              <pre
                className="bg-zinc-100 rounded-lg p-6 mb-6 overflow-x-auto text-zinc-800"
                {...props}
              />
            ),
            hr: () => <hr className="my-12 border-zinc-200" />,
          }}
        >
          {processMarkdown(combinedMarkdown)}
        </ReactMarkdown>
      </div>
    </div>
  );
};

export default DocsContent;

---- ./apps/silkforest-web/src/components/ErrorBoundary.tsx ----

import React, { ErrorInfo } from 'react';

interface ErrorBoundaryProps {
  children: React.ReactNode;
}

interface ErrorBoundaryState {
  hasError: boolean;
}

class ErrorBoundary extends React.Component<
  ErrorBoundaryProps,
  ErrorBoundaryState
> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(_: Error): ErrorBoundaryState {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Uncaught error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="text-center mt-20">
          <h1 className="text-3xl font-bold">Something went wrong.</h1>
          <p>Please try refreshing the page.</p>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
