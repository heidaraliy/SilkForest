
---- ./apps/silkforest-web/src/index.tsx ----

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./index.css";
import ErrorBoundary from "./components/ErrorBoundary";
import { BrowserRouter } from "react-router-dom";

const container = document.getElementById("root");
if (!container) {
  throw new Error("Failed to find the root element.");
}

const root = ReactDOM.createRoot(container);
root.render(
  <React.StrictMode>
    <ErrorBoundary>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </ErrorBoundary>
  </React.StrictMode>
);

---- ./apps/silkforest-web/src/App.tsx ----

import React from "react";
import Navbar from "./components/home/Navbar";
import Footer from "./components/home/Footer";
import RouterDefinitions from "./components/home/RouterDefinitions";

const App: React.FC = () => {
  return (
    <div>
      <Navbar />
      <RouterDefinitions />
      <Footer />
    </div>
  );
};

export default App;

---- ./apps/silkforest-web/src/components/home/Navbar.tsx ----

import React, { useEffect, useState } from "react";
import { NavLink } from "react-router-dom";
import SilkForestBackground from "../../assets/SilkForestBackground.png";
import SilkForest from "../../assets/SilkForest.png";

const Navbar: React.FC = () => {
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);

  // Handle responsiveness
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768);
    };

    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  return (
    <nav
      className={`space-x-2 text-[1.1rem] tracking-tight font-bold font-arimo flex h-16 ${
        isMobile ? "flex-col" : "flex-row"
      } shadow-2xl border-b-2 border-zinc-400`}
      style={{
        backgroundImage: `url(${SilkForestBackground})`,
        backgroundSize: "cover",
        backgroundPosition: "center",
      }}
    >
      <div className="flex w-full justify-between">
        <div className="flex">
          <NavLink to="/">
            <img
              src={SilkForest}
              className={`${
                isMobile ? "w-[8rem]" : "w-[12rem]"
              } w-[12rem] mx-4 my-2`}
              alt="SilkForest Logo"
            />
          </NavLink>
          <NavLink to="/">
            <div className="hover:bg-[#555975] hover:rounded-md">
              <p className="drop-shadow-2xl text-zinc-50 mt-5 flex mx-4">
                Products
              </p>
            </div>
          </NavLink>
          <NavLink to="/">
            <div className="hover:bg-[#555975] hover:rounded-md">
              <p className="drop-shadow-2xl text-zinc-50 mt-5 flex mx-4">
                Documentation
              </p>
            </div>
          </NavLink>
          <NavLink to="/">
            <div className="hover:bg-[#555975] hover:rounded-md">
              <p className="drop-shadow-2xl text-zinc-50 mt-5 flex mx-4">
                About
              </p>
            </div>
          </NavLink>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

---- ./apps/silkforest-web/src/components/home/Intro.tsx ----

import React from "react";
import IntroVideo from "../../assets/intro.mp4";

const Intro: React.FC = () => {
  return (
    <div className="flex justify-center p-8">
      <div className="font-arimo tracking-tight text-xl max-w-5xl text-gray-700">
        <div className="my-8 text-3xl text-center shadow-2xl">
          <video src={IntroVideo} className="rounded-md" autoPlay muted />
        </div>
        <div className="text-2xl font-bold">
          Shape your sound, effortlessly.
        </div>
        <br />
        <div className="text-lg max-w-4xl">
          <span className="font-vidaloka">SilkForest</span> is a suite of
          plugins crafted to transform your sound into{" "}
          <b>rich, ambient expressions</b>. With tools designed to{" "}
          <b>weave ethereal soundscapes</b>, sculpt warm, resonant pads and
          synths, and push vocal production into uncharted territories,{" "}
          <span className="font-vidaloka">SilkForest</span> enables you to
          create music that <b>transcends conventional boundaries</b> and
          embodies a sense of <b>otherworldly depth and artistry</b>.
        </div>
        <br />
        <hr />
        <br />
        <div className="text-2xl font-bold">
          Designed for clarity and control.
        </div>
        <br />
        <div className="text-lg max-w-4xl">
          By removing unnecessary noise and focusing on the most impactful
          parameters, <span className="font-vidaloka">SilkForest</span> empowers
          intuitive sound shaping. Elegant, focused interfaces combined with
          advanced audio processing make it easy to edit, test, and refine
          sounds with precision.
        </div>
      </div>
    </div>
  );
};

export default Intro;

---- ./apps/silkforest-web/src/components/home/Footer.tsx ----

import React from 'react';

const Footer: React.FC = () => {
  return (
    <footer className="p-4 text-center text-gray-700 font-arimo">
      &copy; {new Date().getFullYear()} SilkForest. All rights reserved.
    </footer>
  );
};

export default Footer;

---- ./apps/silkforest-web/src/components/home/RouterDefinitions.tsx ----

import React from "react";
import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
import Intro from "./Intro";

const RouterDefinitions: React.FC = () => (
  <Routes>
    <Route path="/" element={<Intro />} />
  </Routes>
);

export default RouterDefinitions;

---- ./apps/silkforest-web/src/components/ErrorBoundary.tsx ----

import React, { ErrorInfo } from 'react';

interface ErrorBoundaryProps {
  children: React.ReactNode;
}

interface ErrorBoundaryState {
  hasError: boolean;
}

class ErrorBoundary extends React.Component<
  ErrorBoundaryProps,
  ErrorBoundaryState
> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(_: Error): ErrorBoundaryState {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Uncaught error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="text-center mt-20">
          <h1 className="text-3xl font-bold">Something went wrong.</h1>
          <p>Please try refreshing the page.</p>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

---- ./apps/silkforest-web/src/declarations.d.ts ----

declare module "*.png" {
  const value: string;
  export default value;
}

declare module "*.mp4" {
  const value: string;
  export default value;
}
